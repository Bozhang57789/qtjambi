--- qtbase/src/corelib/thread/qthread_win.cpp	2015-06-29 23:04:56.000000000 +0200
+++ qtbase/src/corelib/thread/qthread_win.cpp	2015-08-22 13:05:16.539175100 +0200
@@ -97,19 +97,33 @@
     qt_create_tls();
     QThreadData *threadData = reinterpret_cast<QThreadData *>(TlsGetValue(qt_current_thread_data_tls_index));
     if (!threadData && createIfNecessary) {
-        threadData = new QThreadData;
-        // This needs to be called prior to new AdoptedThread() to
-        // avoid recursion.
-        TlsSetValue(qt_current_thread_data_tls_index, threadData);
-        QT_TRY {
-            threadData->thread = new QAdoptedThread(threadData);
-        } QT_CATCH(...) {
-            TlsSetValue(qt_current_thread_data_tls_index, 0);
+/** recovered from Qt4 for QtJambi5 **/
+        QThread *adopted = 0;
+        if (QInternal::activateCallbacks(QInternal::AdoptCurrentThread, (void **) &adopted)) {
+            Q_ASSERT(adopted);
+            threadData = QThreadData::get2(adopted);
+            TlsSetValue(qt_current_thread_data_tls_index, threadData);
+            adopted->d_func()->running = true;
+            adopted->d_func()->finished = false;
+            static_cast<QAdoptedThread *>(adopted)->init();
+        } else {
+/** end */
+            threadData = new QThreadData;
+            // This needs to be called prior to new AdoptedThread() to
+            // avoid recursion.
+            TlsSetValue(qt_current_thread_data_tls_index, threadData);
+            QT_TRY {
+                threadData->thread = new QAdoptedThread(threadData);
+            } QT_CATCH(...) {
+                TlsSetValue(qt_current_thread_data_tls_index, 0);
+                threadData->deref();
+                threadData = 0;
+                QT_RETHROW;
+            }
             threadData->deref();
-            threadData = 0;
-            QT_RETHROW;
+/** recovered from Qt4 for QtJambi5 **/
         }
-        threadData->deref();
+/** end */
         threadData->isAdopted = true;
         threadData->threadId = reinterpret_cast<Qt::HANDLE>(GetCurrentThreadId());
 
