<?xml version="1.0"?>
<!--****************************************************************************
**
** Copyright (C) 1992-2009 Nokia. All rights reserved.
** Copyright (C) 2009-2020 Dr. Peter Droste, Omix Visualization GmbH & Co. KG. All rights reserved.
**
** This file is part of Qt Jambi.
**
** ** $BEGIN_LICENSE$
** Commercial Usage
** Licensees holding valid Qt Commercial licenses may use this file in
** accordance with the Qt Commercial License Agreement provided with the
** Software or, alternatively, in accordance with the terms contained in
** a written agreement between you and Nokia.
**
** GNU Lesser General Public License Usage
** This file may be used under the terms of the GNU Lesser
** General Public License version 2.1 as published by the Free Software
** Foundation and appearing in the file LICENSE.LGPL included in the
** packaging of this file.  Please review the following information to
** ensure the GNU Lesser General Public License version 2.1 requirements
** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
**
** In addition, as a special exception, Nokia gives you certain
** additional rights. These rights are described in the Nokia Qt LGPL
** Exception version 1.0, included in the file LGPL_EXCEPTION.txt in this
** package.
**
** GNU General Public License Usage
** Alternatively, this file may be used under the terms of the GNU
** General Public License version 3.0 as published by the Free Software
** Foundation and appearing in the file LICENSE.GPL included in the
** packaging of this file.  Please review the following information to
** ensure the GNU General Public License version 3.0 requirements will be
** met: http://www.gnu.org/copyleft/gpl.html.
**
** If you are unsure which license is appropriate for your use, please
** contact the sales department at qt-sales@nokia.com.
** $END_LICENSE$

**
** This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
** WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
**
****************************************************************************-->
<typesystem qt-library="QtXml">
    <rejection class="QXmlAttributes::Attribute" />
    <rejection class="QDomNode" field-name="impl" />

    <enum-type name="QDomNode::NodeType" />
    <enum-type name="QDomNode::EncodingPolicy" />
    <enum-type name="QDomImplementation::InvalidDataPolicy" />

    <value-type name="QDomAttr">
        <modify-function signature="operator=(QDomAttr)" remove="all"/>
        <modify-function signature="nodeType()const" remove="all"/>
    </value-type>

    <value-type name="QDomCDATASection">
        <modify-function signature="operator=(QDomCDATASection)" remove="all"/>
        <modify-function signature="nodeType()const" remove="all"/>
    </value-type>

    <value-type name="QDomCharacterData">
        <modify-function signature="operator=(QDomCharacterData)" remove="all"/>
        <modify-function signature="nodeType()const" remove="all"/>
    </value-type>

    <value-type name="QDomComment">
        <modify-function signature="operator=(QDomComment)" remove="all"/>
        <modify-function signature="nodeType()const" remove="all"/>
    </value-type>

    <value-type name="QDomDocument">
        <modify-function signature="nodeType()const" remove="all"/>
        <modify-function signature="operator=(QDomDocument)" remove="all"/>
    </value-type>

    <value-type name="QDomDocumentFragment">
        <modify-function signature="nodeType()const" remove="all"/>
        <modify-function signature="operator=(QDomDocumentFragment)" remove="all"/>
    </value-type>

    <value-type name="QDomDocumentType" >
        <modify-function signature="nodeType()const" remove="all"/>
        <modify-function signature="operator=(QDomDocumentType)" remove="all"/>
    </value-type>

    <value-type name="QDomEntity">
        <modify-function signature="nodeType()const" remove="all"/>
        <modify-function signature="operator=(QDomEntity)" remove="all"/>
    </value-type>

    <value-type name="QDomEntityReference">
        <modify-function signature="nodeType()const" remove="all"/>
        <modify-function signature="operator=(QDomEntityReference)" remove="all"/>
    </value-type>

    <value-type name="QDomImplementation">
        <modify-function signature="operator=(QDomImplementation)" remove="all"/>
    </value-type>

    <value-type name="QDomNamedNodeMap">
        <modify-function signature="operator=(QDomNamedNodeMap)" remove="all"/>
    </value-type>

    <value-type name="QDomNode">
        <modify-function signature="operator=(QDomNode)" remove="all"/>
        <modify-function signature="attributes()const" remove="all" />
    </value-type>

    <value-type name="QDomNodeList">
        <modify-function signature="operator=(const QDomNodeList &amp;)" remove="all"/>
    </value-type>

    <value-type name="QDomNotation">
        <modify-function signature="nodeType()const" remove="all"/>
        <modify-function signature="operator=(QDomNotation)" remove="all"/>
    </value-type>

    <value-type name="QDomProcessingInstruction">
        <modify-function signature="nodeType()const" remove="all"/>
        <modify-function signature="operator=(QDomProcessingInstruction)" remove="all"/>
    </value-type>

    <value-type name="QDomText">
        <modify-function signature="nodeType()const" remove="all"/>
        <modify-function signature="operator=(const QDomText &amp;)" remove="all"/>
    </value-type>

    <value-type name="QXmlParseException" />

    <value-type name="QXmlAttributes">
      <modify-function signature="index(const QLatin1String&amp;) const">
        <remove/>
      </modify-function>
      <modify-function signature="value(const QLatin1String&amp;) const">
        <remove/>
      </modify-function>
      <modify-function signature="operator=(const QXmlAttributes &amp;)" remove="all" since="5.12.0"/>
    </value-type>

    <value-type name="QXmlNamespaceSupport">
        <custom-constructor>
            QXmlNamespaceSupport *clone = new(placement) QXmlNamespaceSupport;
            if(copy){
                clone->setPrefix("", copy->uri(""));

                QStringList prefixes = copy->prefixes();
                for (int i=0; i&lt;prefixes.size(); ++i)
                    clone->setPrefix(prefixes.at(i), copy->uri(prefixes.at(i)));
            }
            return clone;
        </custom-constructor>
    </value-type>

    <value-type name="QDomElement">
        <modify-function signature="nodeType()const" remove="all"/>
        <modify-function signature="operator=(QDomElement)" remove="all"/>

        <modify-function signature="setAttribute(const QString &amp;, unsigned int)">
            <remove />
        </modify-function>
        <modify-function signature="setAttribute(const QString &amp;, unsigned long long)">
            <remove />
        </modify-function>
        <modify-function signature="setAttributeNS(const QString, const QString &amp;, unsigned int)">
            <remove />
        </modify-function>
        <modify-function signature="setAttributeNS(const QString, const QString &amp;, unsigned long long)">
            <remove />
        </modify-function>

    </value-type>

    <interface-type name="QXmlContentHandler">
        <modify-function signature="setDocumentLocator(QXmlLocator*)">
            <modify-argument index="1">
                <define-ownership class="shell" owner="cplusplus" />
            </modify-argument>
        </modify-function>
    </interface-type>
    <interface-type name="QXmlDTDHandler" />
    <interface-type name="QXmlDeclHandler" />
    <interface-type name="QXmlEntityResolver" />
    <interface-type name="QXmlErrorHandler" />
    <interface-type name="QXmlLexicalHandler" />

    <object-type name="QXmlDefaultHandler">
        <extra-includes>
             <include file-name="qtjambi_xml_repository.h" location="local"/>
        </extra-includes>
        <interface-polymorphy interface="QXmlContentHandler" condition="false" />
        <interface-polymorphy interface="QXmlErrorHandler" condition="false" />
        <interface-polymorphy interface="QXmlDTDHandler" condition="false" />
        <interface-polymorphy interface="QXmlEntityResolver" condition="false" />
        <interface-polymorphy interface="QXmlLexicalHandler" condition="false" />
        <interface-polymorphy interface="QXmlDeclHandler" condition="false" />
        <modify-function signature="setDocumentLocator(QXmlLocator*)">
            <modify-argument index="1">
                <define-ownership class="shell" owner="cplusplus" />
            </modify-argument>
        </modify-function>
    </object-type>
    <object-type name="QXmlInputSource" />
    <object-type name="QXmlLocator" />
    <object-type name="QXmlSimpleReader">
        <modify-function signature="parse(const QXmlInputSource*,bool)">
            <modify-argument index="1" invalidate-after-use="yes" />
        </modify-function>

        <modify-function signature="parse(const QXmlInputSource*)">
            <modify-argument index="1" invalidate-after-use="yes" />
        </modify-function>

        <modify-function signature="parse(const QXmlInputSource&amp;)" remove="all">
        </modify-function>
    </object-type>

    <object-type name="QXmlReader">
        <modify-function signature="parse(const QXmlInputSource*)">
            <modify-argument index="1" invalidate-after-use="yes" />
        </modify-function>
        <modify-function signature="parse(const QXmlInputSource&amp;)" remove="java">
        </modify-function>
    </object-type>
</typesystem>
