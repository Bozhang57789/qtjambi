<?xml version="1.0"?>
<!--****************************************************************************
**
** Copyright (C) 2009-2022 Dr. Peter Droste, Omix Visualization GmbH & Co. KG. All rights reserved.
**
** This file is part of Qt Jambi.
**
** ** $BEGIN_LICENSE$
** Commercial Usage
** Licensees holding valid Qt Commercial licenses may use this file in
** accordance with the Qt Commercial License Agreement provided with the
** Software or, alternatively, in accordance with the terms contained in
** a written agreement between you and Nokia.
**
** GNU Lesser General Public License Usage
** This file may be used under the terms of the GNU Lesser
** General Public License version 2.1 as published by the Free Software
** Foundation and appearing in the file LICENSE.LGPL included in the
** packaging of this file.  Please review the following information to
** ensure the GNU Lesser General Public License version 2.1 requirements
** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
**
** In addition, as a special exception, Nokia gives you certain
** additional rights. These rights are described in the Nokia Qt LGPL
** Exception version 1.0, included in the file LGPL_EXCEPTION.txt in this
** package.
**
** GNU General Public License Usage
** Alternatively, this file may be used under the terms of the GNU
** General Public License version 3.0 as published by the Free Software
** Foundation and appearing in the file LICENSE.GPL included in the
** packaging of this file.  Please review the following information to
** ensure the GNU General Public License version 3.0 requirements will be
** met: http://www.gnu.org/copyleft/gpl.html.
**
** If you are unsure which license is appropriate for your use, please
** contact the sales department at qt-sales@nokia.com.
** $END_LICENSE$

**
** This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
** WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
**
****************************************************************************-->
<typesystem qt-library="QtScript" description="Classes for making Qt applications scriptable. Deprecated in favor of the QJS* classes in the Qt QML module.">
  <rejection class="QScriptValueIterator"/>
    <rejection class="QScriptEngine::FunctionWithArgSignature"/>
    <rejection class="QScriptEngine" function-name="fromScriptValue"/>
    <rejection class="QScriptEngine" function-name="toScriptValue"/>
    <rejection class="QScriptEngine" function-name="newQMetaObject"/>
    <rejection class="QScriptEngine" function-name="scriptValueFromQMetaObject"/>
    <!-- objectById is marked as internal API and would expose memory pointer in QtJambi API -->
    <rejection class="QScriptEngine" function-name="objectById"/>
    <rejection class="QScriptValue" function-name="toQMetaObject"/>
    <rejection class="QScriptValueList"/>
    <rejection class="QScriptValue::QScriptValueList"/>
    <rejection class="QScriptEngine::DemarshalFunction"/>
    <rejection class="QScriptEngine::MarshalFunction"/>
    <!--   <rejection class="QScriptContext" function-name="scopeChain"/> -->
    <enum-type name="QScriptClass::Extension"/>
    <enum-type name="QScriptClass::QueryFlag" flags="QScriptClass::QueryFlags"/>
    <enum-type name="QScriptContext::Error"/>
    <enum-type name="QScriptContext::ExecutionState"/>
    <enum-type name="QScriptContextInfo::FunctionType"/>
    <enum-type name="QScriptEngine::QObjectWrapOption" flags="QScriptEngine::QObjectWrapOptions"/>
    <enum-type name="QScriptEngine::ValueOwnership"/>
    <enum-type name="QScriptEngineAgent::Extension"/>
    <enum-type name="QScriptValue::PropertyFlag" flags="QScriptValue::PropertyFlags"/>
    <enum-type name="QScriptValue::ResolveFlag" flags="QScriptValue::ResolveFlags"/>
    <enum-type name="QScriptValue::SpecialValue"/>
    <enum-type name="QScriptSyntaxCheckResult::State"/>
    <object-type name="QScriptClass" >
    </object-type>
    <object-type name="QScriptClassPropertyIterator"/>
    <object-type name="QScriptContext">
    <modify-function signature="scopeChain()const" remove="all"/>
    </object-type>
  <value-type name="QScriptContextInfo">
    <modify-function signature="operator=(const QScriptContextInfo &amp;)" remove="all"/>
  </value-type>
  <object-type name="QScriptEngineAgent">
    </object-type>
  <value-type name="QScriptString">
    <modify-function signature="operator= ( const QScriptString &amp; )" remove="all"/>
    <modify-function signature="operator QString() const" remove="all"/>
  </value-type>
  <value-type name="QScriptProgram">
    <modify-function signature="operator= ( const QScriptProgram &amp; )" remove="all"/>
  </value-type>
  <interface-type name="QScriptExtensionInterface"/>
    <value-type name="QScriptSyntaxCheckResult">
    <modify-function signature="operator= ( const QScriptSyntaxCheckResult &amp; )" remove="all"/>
        <custom-constructor>
            if(copy)
                return new(placement) QScriptSyntaxCheckResult(*copy);
            else
                return Q_NULLPTR;
        </custom-constructor>
    </value-type>
    <value-type name="QScriptValue">
        <modify-function signature="QScriptValue(uint)" remove="all"/>
        <modify-function signature="QScriptValue(QScriptEngine*,uint)" remove="all"/>
        <modify-function signature="QScriptValue(const QLatin1String &amp;)" remove="all"/>
      <modify-function signature="QScriptValue(QScriptEngine * , const char * )" remove="all"/>
      <modify-function signature="QScriptValue(const char * )" remove="all"/>
      <modify-function signature="operator= ( const QScriptValue &amp; )" remove="all"/>
      <modify-function signature="toBoolean () const" remove="all"/>
      <modify-function signature="isBoolean () const" remove="all"/>
      <modify-function signature="toObject () const" remove="all"/>
      <modify-function signature="toUInt32 () const" remove="all"/>
      <modify-function signature="isQMetaObject () const" remove="all"/>
      <modify-function signature="toUInt16 () const" rename="toShort"/>
      <modify-function signature="toBool () const" rename="toBoolean"/>
      <modify-function signature="isBool () const" rename="isBoolean"/>
      <modify-function signature="toInt32 () const" rename="toInt"/>
      <modify-function signature="toNumber () const" rename="toDouble"/>
      <modify-function signature="toInteger () const" access="private" rename="private_toInteger"/>
        <modify-function signature="setScriptClass(QScriptClass*)">
            <modify-argument index="1">
            <reference-count action="ignore" />
            </modify-argument>
        </modify-function>
    </value-type>
    <!--object-type name="QScriptValueIterator">
        <modify-function signature="operator= ( QScriptValue &amp; )" remove="all"/>
    </object-type-->
    <interface-type name="QScriptable"/>
    <object-type name="QScriptEngine">
        <modify-function signature="setAgent(QScriptEngineAgent*)">
            <modify-argument index="1">
                <define-ownership class="native" owner="cplusplus"/>
            </modify-argument>
        </modify-function>
    </object-type>
    <functional-type name="QScriptEngine::FunctionSignature"/>
    <object-type name="QScriptExtensionPlugin">
        <modify-function signature="setupPackage(QString,QScriptEngine*)const">
            <modify-argument index="2">
            <reference-count action="ignore" />
            </modify-argument>
        </modify-function>
    </object-type>
    <suppress-warning text="WARNING(MetaJavaBuilder) :: skipping function 'QHelpContentItem::QHelpContentItem', unmatched parameter type 'QHelpDBReader*'"/>
    <suppress-warning text="WARNING(MetaJavaBuilder) :: private virtual function 'changeEvent(QEvent * event)' in 'QHelpSearchQueryWidget'"/>
    <suppress-warning text="WARNING(MetaJavaBuilder) :: private virtual function 'focusInEvent(QFocusEvent * focusEvent)' in 'QHelpSearchQueryWidget'"/>
    <suppress-warning text="WARNING(MetaJavaBuilder) :: private virtual function 'changeEvent(QEvent * event)' in 'QHelpSearchResultWidget'"/>
  <suppress-warning text="WARNING(MetaJavaBuilder) :: unhandled enum value: QSysInfo::BigEndian in QAudioFormat::Endian" />
  <suppress-warning text="WARNING(MetaJavaBuilder) :: unmatched enum QSysInfo::BigEndian" />
  <suppress-warning text="WARNING(MetaJavaBuilder) :: unhandled enum value: QSysInfo::LittleEndian in QAudioFormat::Endian" />
  <suppress-warning text="WARNING(MetaJavaBuilder) :: unmatched enum QSysInfo::LittleEndian" />
  <suppress-warning text="WARNING(MetaJavaBuilder) :: skipping function 'QScriptEngine::newFunction', unmatched parameter type 'QScriptEngine::FunctionWithArgSignature'" />
  <suppress-warning text="WARNING(MetaJavaBuilder) :: skipping function 'QScriptEngine::registerCustomType', unmatched parameter type 'QScriptEngine::MarshalFunction'" />
  <suppress-warning text="WARNING(JavaGenerator) :: No ==/!= operator found for value type QScriptSyntaxCheckResult." />
  <suppress-warning text="WARNING(JavaGenerator) :: No ==/!= operator found for value type QScriptValue." />
  <suppress-warning text="WARNING(CppImplGenerator) :: Value type 'QScriptSyntaxCheckResult' is missing a default constructor. The resulting C++ code will not compile.*" />
</typesystem>
