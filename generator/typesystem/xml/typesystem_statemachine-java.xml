<?xml version="1.0"?>
<!--****************************************************************************
**
** Copyright (C) 2019 Dr. Peter Droste, Omix Visualization GmbH & Co. KG. All rights reserved.
**
** This file is part of Qt Jambi.
**
** ** $BEGIN_LICENSE$
** Commercial Usage
** Licensees holding valid Qt Commercial licenses may use this file in
** accordance with the Qt Commercial License Agreement provided with the
** Software or, alternatively, in accordance with the terms contained in
** a written agreement between you and Nokia.
**
** GNU Lesser General Public License Usage
** This file may be used under the terms of the GNU Lesser
** General Public License version 2.1 as published by the Free Software
** Foundation and appearing in the file LICENSE.LGPL included in the
** packaging of this file.  Please review the following information to
** ensure the GNU Lesser General Public License version 2.1 requirements
** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
**
** In addition, as a special exception, Nokia gives you certain
** additional rights. These rights are described in the Nokia Qt LGPL
** Exception version 1.0, included in the file LGPL_EXCEPTION.txt in this
** package.
**
** GNU General Public License Usage
** Alternatively, this file may be used under the terms of the GNU
** General Public License version 3.0 as published by the Free Software
** Foundation and appearing in the file LICENSE.GPL included in the
** packaging of this file.  Please review the following information to
** ensure the GNU General Public License version 3.0 requirements will be
** met: http://www.gnu.org/copyleft/gpl.html.
**
** If you are unsure which license is appropriate for your use, please
** contact the sales department at qt-sales@nokia.com.
** $END_LICENSE$

**
** This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
** WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
**
****************************************************************************-->
<typesystem package="io.qt.statemachine" default-superclass="io.qt.QtObject">
    <object-type name="QAbstractTransition">
        <modify-function signature="setTargetState(QAbstractState*)">
            <modify-argument index="1">
                <reference-count action="clear-add" variable-name="__rcTargetStates" />
            </modify-argument>
        </modify-function>
        <modify-function signature="setTargetStates(const QList&lt;QAbstractState*&gt;&amp;)">
            <modify-argument index="1">
                <reference-count action="clear-add-all" variable-name="__rcTargetStates" />
            </modify-argument>
        </modify-function>
    </object-type>
    <object-type name="QSignalTransition">
        <inject-code class="java">
            <import-file name="typesystem/java/typesystem_core-java.java" quote-after-line="class QSignalTransition___" quote-before-line="}// class"/>
        </inject-code>
        <modify-function signature="QSignalTransition(const QObject *, const char *, QState *)">
            <modify-argument index="2">
                <replace-type modified-type="java.lang.String"/>
            </modify-argument>
            <inject-code class="java" position="beginning">
                signal = cppSignalSignature(sender, signal);
            </inject-code>
        </modify-function>
        <modify-function signature="setSignal(const QByteArray &amp;)">
            <inject-code class="java" position="beginning">
                signal = cppSignalSignature(signal);
            </inject-code>
        </modify-function>
    </object-type>
    <object-type name="QState">
        <inject-code class="java">
            <import-file name="typesystem/java/typesystem_core-java.java" quote-after-line="class QState___" quote-before-line="}// class"/>
        </inject-code>
        <modify-function signature="addTransition(const QObject *, const char *, QAbstractState *)">
            <modify-argument index="1">
                <no-null-pointer/>
                <reference-count action="ignore" />
            </modify-argument>
            <modify-argument index="2">
                <replace-type modified-type="java.lang.String"/>
            </modify-argument>
            <modify-argument index="3">
                <no-null-pointer/>
                <reference-count action="ignore" />
            </modify-argument>
            <inject-code class="java" position="beginning">
                signal = cppSignalSignature(sender, signal);
            </inject-code>
            <inject-code class="java" position="end"><argument-map index="0" meta-name="%0"/><argument-map index="3" meta-name="%3"/>
                addReferenceCount(%0, QAbstractTransition.class, "__rcTargetStates", false, false, %3);
            </inject-code>
        </modify-function>
        <modify-function signature="addTransition(QAbstractState*)">
            <modify-argument index="1">
                <no-null-pointer/>
                <reference-count action="ignore" />
            </modify-argument>
            <inject-code class="java" position="end"><argument-map index="0" meta-name="%0"/><argument-map index="1" meta-name="%1"/>
                addReferenceCount(%0, QAbstractTransition.class, "__rcTargetStates", false, false, %1);
            </inject-code>
        </modify-function>
        <modify-function signature="assignProperty(QObject *, const char *, const QVariant &amp;)">
            <modify-argument index="2">
                <replace-type modified-type="java.lang.String"/>
            </modify-argument>
        </modify-function>
        <inject-code class="java">
        </inject-code>
    </object-type>
    <object-type name="QHistoryState">
        <modify-function signature="setDefaultState(QAbstractState*)">
            <modify-argument index="1">
                <reference-count action="ignore" />
            </modify-argument>
            <inject-code class="java" position="end"><argument-map index="0" meta-name="%0"/><argument-map index="1" meta-name="%1"/>
                addReferenceCount(defaultTransition(), QAbstractTransition.class, "__rcTargetStates", false, false, %1);
            </inject-code>
        </modify-function>
    </object-type>
</typesystem>
