<?xml version="1.0"?>
<!--****************************************************************************
**
** Copyright (C) 2009-2020 Dr. Peter Droste, Omix Visualization GmbH & Co. KG. All rights reserved.
**
** This file is part of Qt Jambi.
**
** ** $BEGIN_LICENSE$
** Commercial Usage
** Licensees holding valid Qt Commercial licenses may use this file in
** accordance with the Qt Commercial License Agreement provided with the
** Software or, alternatively, in accordance with the terms contained in
** a written agreement between you and Nokia.
**
** GNU Lesser General Public License Usage
** This file may be used under the terms of the GNU Lesser
** General Public License version 2.1 as published by the Free Software
** Foundation and appearing in the file LICENSE.LGPL included in the
** packaging of this file.  Please review the following information to
** ensure the GNU Lesser General Public License version 2.1 requirements
** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
**
** In addition, as a special exception, Nokia gives you certain
** additional rights. These rights are described in the Nokia Qt LGPL
** Exception version 1.0, included in the file LGPL_EXCEPTION.txt in this
** package.
**
** GNU General Public License Usage
** Alternatively, this file may be used under the terms of the GNU
** General Public License version 3.0 as published by the Free Software
** Foundation and appearing in the file LICENSE.GPL included in the
** packaging of this file.  Please review the following information to
** ensure the GNU General Public License version 3.0 requirements will be
** met: http://www.gnu.org/copyleft/gpl.html.
**
** If you are unsure which license is appropriate for your use, please
** contact the sales department at qt-sales@nokia.com.
** $END_LICENSE$

**
** This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
** WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
**
****************************************************************************-->
<typesystem qt-library="QtTest">
    <rejection class="QTest" function-name="qCompare" /><!-- not public API -->
    <rejection class="QTest" function-name="compare_ptr_helper" /><!-- not public API -->
    <rejection class="QTest::QBenchmarkIterationController" /><!-- not public API -->
    <rejection class="QTestData" />
    <rejection class="QSignalSpy" function-name="initArgs" /><!-- not public API -->
    <rejection class="QSignalSpy" function-name="qt_metacall" /><!-- not public API -->

    <enum-type name="QTest::AttributeIndex"/>
    <enum-type name="QTest::KeyAction"/>
    <enum-type name="QTest::LogElementType"/>
    <enum-type name="QTest::MouseAction"/>
    <enum-type name="QTest::QBenchmarkMetric"/>
    <enum-type name="QTest::SkipMode"/>
    <enum-type name="QTest::TestFailMode"/>

    <namespace-type name="QTest">
        <extra-includes>
            <include file-name="QTest" location="global"/>
        </extra-includes>

        <modify-function signature="formatString(const char *, const char *, size_t)" remove="all"/><!-- not public API -->
        <modify-function signature="addColumnInternal(int,const char *)" remove="all"/><!-- not public API -->
        <modify-function signature="asciiToKey(char)" remove="all" /><!-- not public API -->
        <modify-function signature="compare_helper(bool,const char *,const char *,int)" remove="all" /><!-- not public API -->
        <modify-function signature="compare_helper(bool,const char *,char *,char *,const char *,const char *,const char *,int)" remove="all" /><!-- not public API -->
        <modify-function signature="compare_string_helper(const char *,const char *,const char *,const char *,const char *,int)" remove="all" /><!-- not public API -->
        <modify-function signature="currentDataTag()" remove="all" /><!-- FIXME: returns (const char *) -->
<!--        <modify-function signature="currentTestFailed()" remove="all" /> --><!-- FIXME: This is documented API, find out why generator can not call C++ -->
        <modify-function signature="keyToAscii(Qt::Key)" remove="all" /><!-- not public API -->
        <modify-function signature="qData(const char *,int)" remove="all" /><!-- not public API -->
        <modify-function signature="qElementData(const char *,int)" remove="all" /><!-- not public API -->
        <modify-function signature="qExpectFail(const char *,const char *,QTest::TestFailMode,const char *,int)" remove="all" /><!-- not public API -->
        <modify-function signature="qFail(const char *,const char *,int)" remove="all" /><!-- not public API -->
        <modify-function signature="qGlobalData(const char *,int)" remove="all" /><!-- not public API -->
        <modify-function signature="qSkip(const char*,const char*,int)" remove="all" /><!-- not public API -->
<!--        <modify-function signature="qSleep(int)" remove="all" /> --><!-- FIXME: This is documented API, find out why generator can not call C++ -->
        <modify-function signature="qVerify(bool,const char *,const char *,const char *,int)" remove="all" /><!-- not public API -->
<!--        <modify-function signature="qWait(int)" remove="all" /> --><!-- FIXME: This is documented API, find out why generator can not call C++ -->
        <modify-function signature="qWarn(const char *,const char *,int)" remove="all" /><!-- not public API -->
        <modify-function signature="testObject()" remove="all" /><!-- not public API -->
        <modify-function signature="toHexRepresentation(const char*,int)" remove="all" /><!-- FIXME: arg1 (const char *) -->
        <modify-function signature="toString(const char*)" remove="all" /><!-- FIXME: arg1 (const char *) -->
        <modify-function signature="toString(const void*)" remove="all" /><!-- probably not useful to QtJambi, other overload exist -->
        <modify-function signature="toPrettyCString(const char *, int)" remove="all" /><!-- probably not useful to QtJambi, other overload exist -->
        <modify-function signature="toPrettyUnicode(QStringView)" remove="all" /><!-- probably not useful to QtJambi, other overload exist -->
        <modify-function signature="qFindTestData(const char*, const char*, int, const char*)" remove="all" />
    </namespace-type>

    <value-type name="QTest::QTouchEventSequence"/>

    <value-type name="QTestEventList"/>

    <object-type name="QSignalSpy">
        <modify-function signature="wait(int)" rename="waitForTimeout" /><!-- not public API -->
        <modify-function signature="QSignalSpy(const QObject *, const char *)">
            <modify-argument index="2">
                <replace-type modified-type="java.lang.String"/>
            </modify-argument>
        </modify-function>
    </object-type>
    <object-type name="QTestEventLoop">
    </object-type>
    <enum-type name="QAbstractItemModelTester::FailureReportingMode"/>
    <object-type name="QAbstractItemModelTester">
    </object-type>
  <suppress-warning text="WARNING(MetaJavaBuilder) :: signature 'qWaitForWindowShown(QWidget*)' for function modification in 'QTest' not found. Possible candidates:"/>
  <suppress-warning text="WARNING(MetaJavaBuilder) :: signature 'qWarn(const char*)' for function modification in 'QTest' not found. Possible candidates: qWarn(const char*,const char*,int) in QTest"/>
  <suppress-warning text="WARNING(MetaJavaBuilder) :: class 'QSignalSpy' inherits from unknown base class 'QList&lt;QList&lt;QVariant>>'"/>
  <suppress-warning text="WARNING(MetaJavaBuilder) :: class not found for setup inheritance 'QList&lt;QList&lt;QVariant>>'"/>
  <suppress-warning text="WARNING(MetaJavaBuilder) :: skipping function 'QTest::newRow', unmatched return type 'QTestData&amp;'"/>
  <suppress-warning text="WARNING(MetaJavaBuilder) :: skipping function 'QTest::addColumn', unmatched parameter type 'T*'"/>
  <suppress-warning text="WARNING(MetaJavaBuilder) :: skipping function 'QTest::toString', unmatched parameter type '*'"/>
  <suppress-warning text="WARNING(MetaJavaBuilder) :: skipping function 'QTest::qTest', unmatched parameter type 'T const&amp;'"/>
  <suppress-warning text="WARNING(MetaJavaBuilder) :: signature 'compare_helper(bool,const char*,const char*,int)' for function modification in 'QTest' not found. Possible candidates: compare_helper(bool,const char*,char*,char*,const char*,const char*,const char*,int) in QTest"/>
  <suppress-warning text="WARNING(MetaJavaBuilder) :: skipping function 'QTest::compare_ptr_helper', unmatched parameter type 'void const volatile*'"/>
  <suppress-warning text="WARNING(MetaJavaBuilder) :: skipping function 'QTest::addRow', unmatched return type 'QTestData&amp;'"/>
</typesystem>

