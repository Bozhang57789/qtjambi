<?xml version="1.0"?>
<!--****************************************************************************
**
** Copyright (C) 1992-2009 Nokia. All rights reserved.
** Copyright (C) 2009-2021 Dr. Peter Droste, Omix Visualization GmbH & Co. KG. All rights reserved.
**
** This file is part of Qt Jambi.
**
** ** $BEGIN_LICENSE$
** Commercial Usage
** Licensees holding valid Qt Commercial licenses may use this file in
** accordance with the Qt Commercial License Agreement provided with the
** Software or, alternatively, in accordance with the terms contained in
** a written agreement between you and Nokia.
**
** GNU Lesser General Public License Usage
** This file may be used under the terms of the GNU Lesser
** General Public License version 2.1 as published by the Free Software
** Foundation and appearing in the file LICENSE.LGPL included in the
** packaging of this file.  Please review the following information to
** ensure the GNU Lesser General Public License version 2.1 requirements
** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
**
** In addition, as a special exception, Nokia gives you certain
** additional rights. These rights are described in the Nokia Qt LGPL
** Exception version 1.0, included in the file LGPL_EXCEPTION.txt in this
** package.
**
** GNU General Public License Usage
** Alternatively, this file may be used under the terms of the GNU
** General Public License version 3.0 as published by the Free Software
** Foundation and appearing in the file LICENSE.GPL included in the
** packaging of this file.  Please review the following information to
** ensure the GNU General Public License version 3.0 requirements will be
** met: http://www.gnu.org/copyleft/gpl.html.
**
** If you are unsure which license is appropriate for your use, please
** contact the sales department at qt-sales@nokia.com.
** $END_LICENSE$

**
** This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
** WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
**
****************************************************************************-->
<typesystem qt-library="QtMultimedia">
    <rejection class="QAudioBuffer::StereoFrame"/>
    <rejection class="QAudioBuffer::StereoFrameDefault"/>
    <namespace-type name="QAudio">
        <include file-name="qaudio.h" location="global"/>
    </namespace-type>
    <namespace-type name="QMultimedia">
    </namespace-type>
    <!--namespace-type name="QMediaMetaData" target-type="class">
    </namespace-type-->

    <enum-type name="QAudio::Error"/>
    <enum-type name="QAudio::Mode"/>
    <enum-type name="QAudio::State"/>
    <enum-type name="QAudio::Role"/>
    <enum-type name="QAudio::VolumeScale"/>
    <enum-type name="QMultimedia::AvailabilityStatus"/>
    <enum-type name="QMultimedia::EncodingMode"/>
    <enum-type name="QMultimedia::EncodingQuality"/>
    <enum-type name="QMultimedia::SupportEstimate"/>
    <enum-type name="QVideoFrame::FieldType"/>
    <enum-type name="QVideoFrame::PixelFormat"/>
    <enum-type name="QAbstractVideoBuffer::HandleType"/>
    <enum-type name="QAbstractVideoBuffer::MapMode"/>
    <enum-type name="QAbstractVideoSurface::Error"/>
    <enum-type name="QAudioFormat::Endian"/>
    <enum-type name="QAudioFormat::SampleType"/>
    <enum-type name="QVideoSurfaceFormat::Direction"/>
    <enum-type name="QVideoSurfaceFormat::YCbCrColorSpace"/>
    <enum-type name="QAudioDecoder::Error"/>
    <enum-type name="QAudioDecoder::State"/>
    <enum-type name="QCamera::CaptureMode" flags="QCamera::CaptureModes"/>
    <enum-type name="QCamera::Error"/>
    <enum-type name="QCamera::LockChangeReason"/>
    <enum-type name="QCamera::LockStatus"/>
    <enum-type name="QCamera::LockType" flags="QCamera::LockTypes"/>
    <enum-type name="QCamera::State"/>
    <enum-type name="QCamera::Status"/>
    <enum-type name="QCamera::Position"/>
    <enum-type name="QCameraExposure::ExposureMode"/>
    <enum-type name="QCameraExposure::FlashMode" flags="QCameraExposure::FlashModes"/>
    <enum-type name="QCameraExposure::MeteringMode"/>
    <enum-type name="QCameraExposureControl::ExposureParameter"/>
    <enum-type name="QCameraFeedbackControl::EventType"/>
    <enum-type name="QCameraFocus::FocusMode" flags="QCameraFocus::FocusModes"/>
    <enum-type name="QCameraFocus::FocusPointMode"/>
    <enum-type name="QCameraFocusZone::FocusZoneStatus"/>
    <enum-type name="QCameraImageCapture::CaptureDestination" flags="QCameraImageCapture::CaptureDestinations"/>
    <enum-type name="QCameraImageCapture::DriveMode"/>
    <enum-type name="QCameraImageCapture::Error"/>
    <enum-type name="QCameraImageProcessing::WhiteBalanceMode"/>
    <enum-type name="QCameraImageProcessing::ColorFilter"/>
    <enum-type name="QCameraImageProcessingControl::ProcessingParameter"/>
    <enum-type name="QCameraViewfinderSettingsControl::ViewfinderParameter"/>
    <enum-type name="QMediaPlayer::Error"/>
    <enum-type name="QMediaPlayer::Flag" flags="QMediaPlayer::Flags"/>
    <enum-type name="QMediaPlayer::MediaStatus"/>
    <enum-type name="QMediaPlayer::State"/>
    <enum-type name="QMediaPlaylist::Error"/>
    <enum-type name="QMediaPlaylist::PlaybackMode"/>
    <enum-type name="QMediaRecorder::Error"/>
    <enum-type name="QMediaRecorder::State"/>
    <enum-type name="QMediaRecorder::Status"/>
    <enum-type name="QMediaStreamsControl::StreamType"/>
    <enum-type name="QRadioData::Error"/>
    <enum-type name="QRadioData::ProgramType"/>
    <enum-type name="QRadioTuner::Band"/>
    <enum-type name="QRadioTuner::Error"/>
    <enum-type name="QRadioTuner::SearchMode"/>
    <enum-type name="QRadioTuner::State"/>
    <enum-type name="QRadioTuner::StereoMode"/>
    <enum-type name="QSound::Loop"/>
    <enum-type name="QSoundEffect::Loop"/>
    <enum-type name="QSoundEffect::Status"/>
    <enum-type name="QCameraControl::PropertyChangeType"/>
    <enum-type name="QMediaServiceProviderHint::Feature" flags="QMediaServiceProviderHint::Features"/>
    <enum-type name="QMediaServiceProviderHint::Type"/>
    <enum-type name="QVideoFilterRunnable::RunFlag" flags="QVideoFilterRunnable::RunFlags"/>

    <value-type name="QVideoFrame">
    <modify-function signature="operator=(const QVideoFrame &amp;)" rename="set">
        <modify-argument index="0">
            <replace-type modified-type="void" />
        </modify-argument>
    </modify-function>
    <!--modify-function signature="operator!=(const QVideoFrame &amp;)const" remove="all"/-->
        <modify-function signature="bits()" remove="all" />
        <modify-function signature="bits(int)" remove="all" />
        <modify-function signature="bits(int)const" remove="all" />
    </value-type>

    <value-type name="QAudioBuffer">
        <modify-function signature="operator=(const QAudioBuffer &amp;)" remove="all"/>
    </value-type>

    <object-type name="QAbstractVideoBuffer">
    </object-type>
    <object-type name="QAbstractPlanarVideoBuffer">
    </object-type>
    <value-type name="QAudioDeviceInfo">
    <modify-function signature="operator=(const QAudioDeviceInfo &amp;)" remove="all"/>
    <modify-function signature="operator!=(const QAudioDeviceInfo &amp;)const" remove="all"/>
    </value-type>
    <value-type name="QAudioFormat">
    <modify-function signature="operator=(const QAudioFormat &amp;)" remove="all"/>
    <modify-function signature="operator!=(const QAudioFormat &amp;)const" remove="all"/>
    </value-type>
    <value-type name="QVideoSurfaceFormat">
    <modify-function signature="operator=(const QVideoSurfaceFormat &amp;)" remove="all"/>
    <modify-function signature="operator!=(const QVideoSurfaceFormat &amp;)const" remove="all"/>
    </value-type>
    <value-type name="QAudioEncoderSettings">
    <modify-function signature="operator=(const QAudioEncoderSettings &amp;)" remove="all"/>
    <modify-function signature="operator!=(const QAudioEncoderSettings &amp;)const" remove="all"/>
    </value-type>
    <value-type name="QCameraFocusZone">
    <modify-function signature="operator=(const QCameraFocusZone &amp;)" remove="all"/>
    <modify-function signature="operator!=(const QCameraFocusZone &amp;)const" remove="all"/>
    </value-type>
    <value-type name="QImageEncoderSettings">
    <modify-function signature="operator=(const QImageEncoderSettings &amp;)" remove="all"/>
    <modify-function signature="operator!=(const QImageEncoderSettings &amp;)const" remove="all"/>
    </value-type>
    <value-type name="QMediaContent">
    <modify-function signature="operator=(const QMediaContent &amp;)" remove="all"/>
    <modify-function signature="operator!=(const QMediaContent &amp;)const" remove="all"/>
    </value-type>
    <value-type name="QMediaResource">
    <modify-function signature="operator=(const QMediaResource &amp;)" remove="all"/>
    <modify-function signature="operator!=(const QMediaResource &amp;)const" remove="all"/>
    </value-type>
    <value-type name="QMediaTimeInterval">
    <modify-function signature="operator=(const QMediaTimeInterval &amp;)" remove="all" since="5.14.0"/>
    <!--modify-function signature="operator!=(const QMediaTimeInterval &amp;)const" remove="all"/-->
    </value-type>
    <value-type name="QMediaTimeRange">
        <modify-function signature="operator=(const QMediaTimeInterval&amp;)" remove="all"/>
        <modify-function signature="operator=(const QMediaTimeRange &amp;)" remove="all"/>
        <modify-function signature="operator+=(const QMediaTimeInterval&amp;)" remove="all"/>
        <modify-function signature="operator+=(const QMediaTimeRange &amp;)" remove="all"/>
        <modify-function signature="operator-=(const QMediaTimeInterval&amp;)" remove="all"/>
        <modify-function signature="operator-=(const QMediaTimeRange &amp;)" remove="all"/>
    <!--modify-function signature="operator!=(const QMediaTimeRange &amp;)const" remove="all"/-->
    </value-type>
    <value-type name="QVideoEncoderSettings">
    <modify-function signature="operator=(const QVideoEncoderSettings &amp;)" remove="all"/>
    <modify-function signature="operator!=(const QVideoEncoderSettings &amp;)const" remove="all"/>
    </value-type>
    <value-type name="QMediaServiceProviderHint">
    <modify-function signature="operator=(const QMediaServiceProviderHint &amp;)" remove="all"/>
    <modify-function signature="operator!=(const QMediaServiceProviderHint &amp;)const" remove="all"/>
    </value-type>
    <value-type name="QCameraViewfinderSettings">
    <modify-function signature="operator=(const QCameraViewfinderSettings &amp;)" remove="all"/>
    </value-type>
    <value-type name="QCamera::FrameRateRange">
    </value-type>
    
    <object-type name="QAbstractVideoSurface"/>
    <object-type name="QAudioOutput"/>
    <object-type name="QAudioDecoder">
        <modify-function signature="setSourceDevice(QIODevice*)">
            <modify-argument index="1">
            <reference-count action="ignore" />
            </modify-argument>
        </modify-function>
    </object-type>
    <object-type name="QAudioDecoderControl">
        <modify-function signature="setSourceDevice(QIODevice*)">
            <modify-argument index="1">
            <reference-count action="ignore" />
            </modify-argument>
        </modify-function>
    </object-type>
    <object-type name="QAudioEncoderSettingsControl"/>
    <object-type name="QAudioInput"/>
    <object-type name="QAudioInputSelectorControl"/>
    <object-type name="QAudioOutputSelectorControl"/>
    <object-type name="QAudioProbe">
    </object-type>
    <object-type name="QAudioRecorder"/>
    <object-type name="QCamera">
        <!--modify-function signature="lockStatusChanged(QCamera::LockType, QCamera::LockStatus, QCamera::LockChangeReason)" rename="lockStatusChangedWithType"/-->
        <modify-function signature="setViewfinder(QAbstractVideoSurface*)">
            <modify-argument index="1">
            <reference-count action="ignore" />
            </modify-argument>
        </modify-function>
        <modify-function signature="setViewfinder(QGraphicsVideoItem*)">
            <modify-argument index="1">
            <reference-count action="ignore" />
            </modify-argument>
        </modify-function>
        <modify-function signature="setViewfinder(QVideoWidget*)">
            <modify-argument index="1">
            <reference-count action="ignore" />
            </modify-argument>
        </modify-function>
    </object-type>
    <value-type name="QCameraInfo">
        <modify-function signature="operator=(const QCameraInfo&amp;)" remove="all"/>
    </value-type>
    <object-type name="QCameraCaptureBufferFormatControl"/>
    <object-type name="QCameraCaptureDestinationControl"/>
    <object-type name="QCameraControl"/>
    <object-type name="QCameraInfoControl"/>
    <object-type name="QCameraExposureControl"/>
    <object-type name="QCameraFeedbackControl"/>
    <object-type name="QCameraFlashControl"/>
    <object-type name="QCameraExposure"/>
    <object-type name="QCameraFocus"/>
    <object-type name="QCameraFocusControl"/>
    <object-type name="QCameraImageCapture">
        <interface-polymorphy interface="QMediaBindableInterface" condition="typeid(*reinterpret_cast&lt;QMediaBindableInterface*>(%1))==typeid(QCameraImageCapture)" />
        <modify-function signature="setMediaObject(QMediaObject*)">
            <modify-argument index="1">
            <reference-count action="ignore" />
            </modify-argument>
        </modify-function>
    </object-type>
    <object-type name="QCameraImageCaptureControl"/>
    <object-type name="QCameraImageProcessing"/>
    <object-type name="QCameraImageProcessingControl"/>
    <object-type name="QCameraLocksControl"/>
    <object-type name="QCameraViewfinderSettingsControl"/>
    <object-type name="QCameraViewfinderSettingsControl2"/>
    <object-type name="QCameraZoomControl"/>
    <object-type name="QImageEncoderControl"/>
    <object-type name="QMediaAudioProbeControl"/>
    <object-type name="QMediaAvailabilityControl"/>
    <object-type name="QMediaContainerControl"/>
    <object-type name="QMediaControl"/>
    <object-type name="QAudioRoleControl"/>
    <object-type name="QMediaGaplessPlaybackControl"/>
    <object-type name="QMediaNetworkAccessControl"/>
    <object-type name="QAbstractAudioDeviceInfo"/>
    <object-type name="QAbstractAudioInput">
        <modify-function signature="notify()" rename="notifySignal" />
    </object-type>
    <object-type name="QAbstractAudioOutput">
        <modify-function signature="notify()" rename="notifySignal" />
    </object-type>
    <object-type name="QMediaObject">
    <!--modify-function signature="availabilityChanged(QMultimedia::AvailabilityStatus)" rename="availabilityStatusChanged"/>
    <modify-function signature="metaDataChanged(const QString &amp;, const QVariant &amp;)" rename="metaDataKeyValueChanged"/-->
    </object-type>
    <object-type name="QMediaPlayer">
        <modify-function signature="setVideoOutput(QGraphicsVideoItem*)">
            <modify-argument index="1">
            <reference-count action="ignore" />
            </modify-argument>
        </modify-function>
        <modify-function signature="setVideoOutput(QAbstractVideoSurface*)">
            <modify-argument index="1">
            <reference-count action="ignore" />
            </modify-argument>
        </modify-function>
        <modify-function signature="setVideoOutput(QVideoWidget*)">
            <modify-argument index="1">
            <reference-count action="ignore" />
            </modify-argument>
        </modify-function>
        <modify-function signature="setPlaylist(QMediaPlaylist*)">
            <modify-argument index="1">
            <reference-count action="ignore" />
            </modify-argument>
        </modify-function>
        <modify-function signature="setMedia(QMediaContent,QIODevice*)">
            <modify-argument index="1">
            <reference-count action="ignore" />
            </modify-argument>
        </modify-function>
    </object-type>
    <object-type name="QMediaPlayerControl">
        <modify-function signature="setMedia(QMediaContent,QIODevice*)">
            <modify-argument index="1">
            <reference-count action="ignore" />
            </modify-argument>
        </modify-function>
    </object-type>
    <object-type name="QMediaPlaylist">
        <interface-polymorphy interface="QMediaBindableInterface" condition="typeid(*reinterpret_cast&lt;QMediaBindableInterface*>(%1))==typeid(QMediaPlaylist)" />
        <modify-function signature="setMediaObject(QMediaObject*)">
            <modify-argument index="1">
            <reference-count action="ignore" />
            </modify-argument>
        </modify-function>
    </object-type>
    <object-type name="QMediaRecorder">
        <interface-polymorphy interface="QMediaBindableInterface" condition="typeid(*reinterpret_cast&lt;QMediaBindableInterface*>(%1))==typeid(QMediaRecorder)" />
        <!--modify-function signature="availabilityChanged(QMultimedia::AvailabilityStatus)" rename="availabilityStatusChanged"/>
        <modify-function signature="metaDataChanged(const QString &amp;, const QVariant &amp;)" rename="metaDataKeyValueChanged"/-->
        <modify-function signature="setMediaObject(QMediaObject*)">
            <modify-argument index="1">
            <reference-count action="ignore" />
            </modify-argument>
        </modify-function>
    </object-type>
    <object-type name="QMediaRecorderControl"/>
    <object-type name="QMediaService"/>
    <object-type name="QMediaStreamsControl"/>
    <object-type name="QMediaVideoProbeControl"/>
    <object-type name="QMetaDataReaderControl">
    <!--modify-function signature="metaDataChanged(const QString &amp;, const QVariant &amp;)" rename="metaDataKeyValueChanged"/-->
    </object-type>
    <object-type name="QMetaDataWriterControl">
    <!--modify-function signature="metaDataChanged(const QString &amp;, const QVariant &amp;)" rename="metaDataKeyValueChanged"/-->
    </object-type>
    <object-type name="QRadioData">
        <interface-polymorphy interface="QMediaBindableInterface" condition="typeid(*reinterpret_cast&lt;QMediaBindableInterface*>(%1))==typeid(QRadioData)" />
        <modify-function signature="setMediaObject(QMediaObject*)">
            <modify-argument index="1">
            <reference-count action="ignore" />
            </modify-argument>
        </modify-function>
    </object-type>
    <object-type name="QRadioDataControl"/>
    <object-type name="QRadioTuner"/>
    <object-type name="QRadioTunerControl"/>
    <object-type name="QSound"/>
    <object-type name="QSoundEffect"/>
    <object-type name="QVideoDeviceSelectorControl">
    <!--modify-function signature="selectedDeviceChanged(int)" rename="selectedDeviceChangedByIndex"/>
    <modify-function signature="selectedDeviceChanged(const QString &amp;)" rename="selectedDeviceChangedByName"/-->
    </object-type>
    <object-type name="QVideoEncoderSettingsControl"/>
    <object-type name="QVideoProbe">
    </object-type>
    <object-type name="QVideoRendererControl">
        <modify-function signature="setSurface(QAbstractVideoSurface*)">
            <modify-argument index="1">
            <reference-count action="set" variable-name="__rcSurface" access="friendly"/>
            </modify-argument>
        </modify-function>
    </object-type>
    <object-type name="QVideoWindowControl"/>
    <object-type name="QMediaServiceProviderPlugin">
        <modify-function signature="create(const QString&amp;)">
            <modify-argument index="return">
                <define-ownership class="native" owner="java"/>
                <define-ownership class="shell" owner="cplusplus"/>
            </modify-argument>
        </modify-function>
    </object-type>
    <object-type name="QAudioSystemPlugin">
        <modify-function signature="createDeviceInfo(const QByteArray&amp;, QAudio::Mode)">
            <modify-argument index="return">
                <define-ownership class="native" owner="java"/>
                <define-ownership class="shell" owner="cplusplus"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="createInput(const QByteArray&amp;)">
            <modify-argument index="return">
                <define-ownership class="native" owner="java"/>
                <define-ownership class="shell" owner="cplusplus"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="createOutput(const QByteArray&amp;)">
            <modify-argument index="return">
                <define-ownership class="native" owner="java"/>
                <define-ownership class="shell" owner="cplusplus"/>
            </modify-argument>
        </modify-function>
    </object-type>
    <object-type name="QGstBufferPoolPlugin"/>
    <object-type name="QMediaPlaylistIOPlugin"/>
    <object-type name="QMediaResourcePolicyPlugin"/>
    <object-type name="QSGVideoNodeFactoryPlugin"/>
    <object-type name="QAbstractVideoFilter">
        <modify-function signature="createFilterRunnable()">
            <modify-argument index="return">
                <define-ownership class="native" owner="java"/>
                <define-ownership class="shell" owner="cplusplus"/>
            </modify-argument>
        </modify-function>
    </object-type>
    <object-type name="QCustomAudioRoleControl"/>
    <object-type name="QVideoFilterRunnable"/>

    <interface-type name="QAudioSystemFactoryInterface">
        <modify-function signature="createDeviceInfo(const QByteArray&amp;, QAudio::Mode)">
            <modify-argument index="return">
                <define-ownership class="native" owner="java"/>
                <define-ownership class="shell" owner="cplusplus"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="createInput(const QByteArray&amp;)">
            <modify-argument index="return">
                <define-ownership class="native" owner="java"/>
                <define-ownership class="shell" owner="cplusplus"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="createOutput(const QByteArray&amp;)">
            <modify-argument index="return">
                <define-ownership class="native" owner="java"/>
                <define-ownership class="shell" owner="cplusplus"/>
            </modify-argument>
        </modify-function>
    </interface-type>
    <interface-type name="QDeclarativeVideoBackendFactoryInterface"/>
    <interface-type name="QMediaBindableInterface">
        <modify-function signature="setMediaObject(QMediaObject*)">
            <modify-argument index="1">
            <reference-count action="ignore" />
            </modify-argument>
        </modify-function>
    </interface-type>
    <interface-type name="QMediaServiceFeaturesInterface"/>
    <interface-type name="QMediaServiceSupportedDevicesInterface"/>
    <interface-type name="QMediaServiceSupportedFormatsInterface"/>
    <interface-type name="QMediaServiceProviderFactoryInterface">
        <modify-function signature="create(const QString&amp;)">
            <modify-argument index="return">
                <define-ownership class="native" owner="java"/>
                <define-ownership class="shell" owner="cplusplus"/>
            </modify-argument>
        </modify-function>
    </interface-type>
    <interface-type name="QMediaServiceCameraInfoInterface"/>
    <interface-type name="QMediaServiceDefaultDeviceInterface"/>

  <suppress-warning text="WARNING(MetaJavaBuilder) :: skipping function 'QAudioBuffer::QAudioBuffer', unmatched parameter type 'QAbstractAudioBuffer*'" />
  <suppress-warning text="WARNING(MetaJavaBuilder) :: skipping function 'QMediaService::requestControl', unmatched return type 'T'" />
  <suppress-warning text="WARNING(JavaGenerator) :: No ==/!= operator found for value type QWebEngine*." />
  <suppress-warning text="WARNING(JavaGenerator) :: No ==/!= operator found for value type QAudioBuffer." />
  <suppress-warning text="WARNING(JavaGenerator) :: No ==/!= operator found for value type QCameraViewfinderSettings." />
  <suppress-warning text="WARNING(JavaGenerator) :: No ==/!= operator found for value type QVideoSurfaceFormat." />
</typesystem>
