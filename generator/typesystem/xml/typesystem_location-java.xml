<?xml version="1.0"?>
<!--****************************************************************************
**
** Copyright (C) 2009-2021 Dr. Peter Droste, Omix Visualization GmbH & Co. KG. All rights reserved.
**
** This file is part of Qt Jambi.
**
** ** $BEGIN_LICENSE$
** Commercial Usage
** Licensees holding valid Qt Commercial licenses may use this file in
** accordance with the Qt Commercial License Agreement provided with the
** Software or, alternatively, in accordance with the terms contained in
** a written agreement between you and Nokia.
**
** GNU Lesser General Public License Usage
** This file may be used under the terms of the GNU Lesser
** General Public License version 2.1 as published by the Free Software
** Foundation and appearing in the file LICENSE.LGPL included in the
** packaging of this file.  Please review the following information to
** ensure the GNU Lesser General Public License version 2.1 requirements
** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
**
** In addition, as a special exception, Nokia gives you certain
** additional rights. These rights are described in the Nokia Qt LGPL
** Exception version 1.0, included in the file LGPL_EXCEPTION.txt in this
** package.
**
** GNU General Public License Usage
** Alternatively, this file may be used under the terms of the GNU
** General Public License version 3.0 as published by the Free Software
** Foundation and appearing in the file LICENSE.GPL included in the
** packaging of this file.  Please review the following information to
** ensure the GNU General Public License version 3.0 requirements will be
** met: http://www.gnu.org/copyleft/gpl.html.
**
** If you are unsure which license is appropriate for your use, please
** contact the sales department at qt-sales@nokia.com.
** $END_LICENSE$

**
** This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
** WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
**
****************************************************************************-->
<typesystem package="io.qt.location" module="qtjambi.location" default-superclass="io.qt.QtObject">
    <rejection class="QGeoServiceProviderFactory" function-name="createMappingManagerEngine"/>
    <rejection class="QGeoServiceProviderFactoryV2" function-name="createNavigationManagerEngine"/>
    <interface-type name="QGeoServiceProviderFactory">
        <inject-code class="interface">
            <import-file name="typesystem/java/typesystem_location-java.java" quote-after-line="class QGeoServiceProviderFactory___" quote-before-line="}// class"/>
        </inject-code>
        <extra-includes>
            <include file-name="qtjambi_location_repository.h" location="local"/>
        </extra-includes>
        <modify-function signature="createGeocodingManagerEngine(const QMap&lt;QString,QVariant> &amp;,QGeoServiceProvider::Error *,QString *) const">
            <modify-argument index="0">
                <replace-type modified-type="io.qt.location.QGeoServiceProviderFactory$Result&lt;QGeoCodingManagerEngine>"/>
                <define-ownership class="native" owner="java"/>
                <define-ownership class="shell" owner="cplusplus"/>
                <conversion-rule class="native">
                    jobject __java_engine = qtjambi_cast&lt;jobject>(%env, %in);
                    qtjambi_set_java_ownership_for_toplevel_object(%env, %in);
                    jobject __java_%2 = qtjambi_cast&lt;jobject>(%env, %2);
                    jstring __java_%3 = qtjambi_cast&lt;jstring>(%env, %3);
                    jobject %out = Java::QtLocation::QGeoServiceProviderFactory$Result::newInstance(
                                         %env,
                                         __java_engine,
                                         __java_%2,
                                         __java_%3);
                </conversion-rule>
                <conversion-rule class="shell">
                    QGeoCodingManagerEngine*  %out = nullptr;
                    if(%in){
                        jobject __java_engine = Java::QtLocation::QGeoServiceProviderFactory$Result::engine(%env, %in);
                        %out = qtjambi_cast&lt;QGeoCodingManagerEngine*>(%env, __java_engine);
                        if(%2){
                            jobject __java_%2 = Java::QtLocation::QGeoServiceProviderFactory$Result::error(%env, %in);
                            *%2 = qtjambi_cast&lt;QGeoServiceProvider::Error>(%env, __java_%2);
                        }
                        if(%3){
                            jobject __java_%3 = Java::QtLocation::QGeoServiceProviderFactory$Result::errorString(%env, %in);
                            *%3 = qtjambi_cast&lt;QString>(%env, __java_%3);
                        }
                    }else{
                        if(%2){
                            *%2 = QGeoServiceProvider::LoaderError;
                        }
                        if(%3){
                            *%3 = QString("No result returned.");
                        }
                    }
                </conversion-rule>
            </modify-argument>
            <modify-argument index="2">
                <remove-argument/>
                <conversion-rule class="native">
                QGeoServiceProvider::Error %in = QGeoServiceProvider::NoError;
                QGeoServiceProvider::Error* %out = &amp;%in;
                </conversion-rule>
            </modify-argument>
            <modify-argument index="3">
                <remove-argument/>
                <conversion-rule class="native">
                QString %in;
                QString* %out = &amp;%in;
                </conversion-rule>
            </modify-argument>
        </modify-function>
        <modify-function signature="createRoutingManagerEngine(const QMap&lt;QString,QVariant> &amp;,QGeoServiceProvider::Error *,QString *) const">
            <modify-argument index="0">
                <replace-type modified-type="io.qt.location.QGeoServiceProviderFactory.Result&lt;QGeoRoutingManagerEngine>"/>
                <define-ownership class="native" owner="java"/>
                <define-ownership class="shell" owner="cplusplus"/>
                <conversion-rule class="native">
                    jobject __java_engine = qtjambi_cast&lt;jobject>(%env, %in);
                    qtjambi_set_java_ownership_for_toplevel_object(%env, %in);
                    jobject __java_%2 = qtjambi_cast&lt;jobject>(%env, %2);
                    jstring __java_%3 = qtjambi_cast&lt;jstring>(%env, %3);
                    jobject %out = Java::QtLocation::QGeoServiceProviderFactory$Result::newInstance(
                                         %env,
                                         __java_engine,
                                         __java_%2,
                                         __java_%3);
                </conversion-rule>
                <conversion-rule class="shell">
                    QGeoRoutingManagerEngine*  %out = nullptr;
                    if(%in){
                        jobject __java_engine = Java::QtLocation::QGeoServiceProviderFactory$Result::engine(%env, %in);
                        %out = qtjambi_cast&lt;QGeoRoutingManagerEngine*>(%env, __java_engine);
                        if(%2){
                            jobject __java_%2 = Java::QtLocation::QGeoServiceProviderFactory$Result::error(%env, %in);
                            *%2 = qtjambi_cast&lt;QGeoServiceProvider::Error>(%env, __java_%2);
                        }
                        if(%3){
                            jobject __java_%3 = Java::QtLocation::QGeoServiceProviderFactory$Result::errorString(%env, %in);
                            *%3 = qtjambi_cast&lt;QString>(%env, __java_%3);
                        }
                    }else{
                        if(%2){
                            *%2 = QGeoServiceProvider::LoaderError;
                        }
                        if(%3){
                            *%3 = QString("No result returned.");
                        }
                    }
                </conversion-rule>
            </modify-argument>
            <modify-argument index="2">
                <remove-argument/>
                <conversion-rule class="native">
                QGeoServiceProvider::Error %in = QGeoServiceProvider::NoError;
                QGeoServiceProvider::Error* %out = &amp;%in;
                </conversion-rule>
            </modify-argument>
            <modify-argument index="3">
                <remove-argument/>
                <conversion-rule class="native">
                QString %in;
                QString* %out = &amp;%in;
                </conversion-rule>
            </modify-argument>
        </modify-function>
        <modify-function signature="createPlaceManagerEngine(const QMap&lt;QString,QVariant> &amp;,QGeoServiceProvider::Error *,QString *) const">
            <modify-argument index="0">
                <replace-type modified-type="io.qt.location.QGeoServiceProviderFactory.Result&lt;QPlaceManagerEngine>"/>
                <define-ownership class="native" owner="java"/>
                <define-ownership class="shell" owner="cplusplus"/>
                <conversion-rule class="native">
                    jobject __java_engine = qtjambi_cast&lt;jobject>(%env, %in);
                    qtjambi_set_java_ownership_for_toplevel_object(%env, %in);
                    jobject __java_%2 = qtjambi_cast&lt;jobject>(%env, %2);
                    jstring __java_%3 = qtjambi_cast&lt;jstring>(%env, %3);
                    jobject %out = Java::QtLocation::QGeoServiceProviderFactory$Result::newInstance(
                                         %env,
                                         __java_engine,
                                         __java_%2,
                                         __java_%3);
                </conversion-rule>
                <conversion-rule class="shell">
                    QPlaceManagerEngine*  %out = nullptr;
                    if(%in){
                        jobject __java_engine = Java::QtLocation::QGeoServiceProviderFactory$Result::engine(%env, %in);
                        %out = qtjambi_cast&lt;QPlaceManagerEngine*>(%env, __java_engine);
                        if(%2){
                            jobject __java_%2 = Java::QtLocation::QGeoServiceProviderFactory$Result::error(%env, %in);
                            *%2 = qtjambi_cast&lt;QGeoServiceProvider::Error>(%env, __java_%2);
                        }
                        if(%3){
                            jobject __java_%3 = Java::QtLocation::QGeoServiceProviderFactory$Result::errorString(%env, %in);
                            *%3 = qtjambi_cast&lt;QString>(%env, __java_%3);
                        }
                    }else{
                        if(%2){
                            *%2 = QGeoServiceProvider::LoaderError;
                        }
                        if(%3){
                            *%3 = QString("No result returned.");
                        }
                    }
                </conversion-rule>
            </modify-argument>
            <modify-argument index="2">
                <remove-argument/>
                <conversion-rule class="native">
                QGeoServiceProvider::Error %in = QGeoServiceProvider::NoError;
                QGeoServiceProvider::Error* %out = &amp;%in;
                </conversion-rule>
            </modify-argument>
            <modify-argument index="3">
                <remove-argument/>
                <conversion-rule class="native">
                QString %in;
                QString* %out = &amp;%in;
                </conversion-rule>
            </modify-argument>
        </modify-function>
    </interface-type>
    <interface-type name="QGeoServiceProviderFactoryV2">
        <extra-includes>
            <include file-name="qtjambi_location_repository.h" location="local"/>
        </extra-includes>
    </interface-type>
    <interface-type name="QGeoServiceProviderFactoryV3">
        <extra-includes>
            <include file-name="qtjambi_location_repository.h" location="local"/>
        </extra-includes>
    </interface-type>
    <value-type name="QPlaceIcon">
        <modify-function signature="setManager(QPlaceManager *)">
            <modify-argument index="1">
                <reference-count action="set" variable-name="__rcManager"/>
            </modify-argument>
        </modify-function>
    </value-type>
</typesystem>
