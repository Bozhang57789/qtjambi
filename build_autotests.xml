<!--
    TODO:
    - We work the target names into "tests.*" namespace "compile.java" => "tests.compile.java".
-->
<project default="all" basedir=".">

    <property environment="env"/>

    <tstamp/>

    <property file="tests.properties"/>

    <property name="junit.exists" value="tests.junit.exists" />

    <target name="help"
                description="Provides detailed help.">
        <echo>Generates an executable .jar file that runs the generator example...</echo>
    </target>

    <target name="tests.clean" description="Cleans built test files">
        <delete dir="${outputDir}/tests/autotest-generator"/>
        <delete dir="${outputDir}/tests/autotests"/>
        <delete dir="${outputDir}/tests/auto"/>
        <delete dir="${outputDir}/tests"/>
    </target>

    <target name="reports.clean" description="Cleans the Unit Test results">
        <delete dir="${outputDir}/tests/junitxml-release"/>
        <delete dir="${outputDir}/tests/junitxml-debug"/>
        <delete dir="${outputDir}/tests/TestResults-release"/>
        <delete dir="${outputDir}/tests/TestResults-debug"/>
    </target>

    <target name="check.junit">
        <available property="junit.path" type="file" file="${tests.junit}"/>
        <fail message="Path to JUnit is required to build the Unit Tests. Specify the path in tests.properties">
            <condition>
                    <not>
                        <isset property="junit.path"/>
                    </not>
            </condition>
        </fail>
    </target>
    
    <target name="check.ssl">
        <available property="qtjambi.ssl" type="file" file="build/generator/out/java/io/qt/network/QSslSocket.java"/>
    </target>

    <target name="compile.native.generator" depends="init.build,generator.make,generator.xmlmerge">
        <mkdir dir="${outputDir}/tests/autotest-generator"/>
        <generator dir="${generator.builddir}"
                debugTools="${qtjambi.debug-tools}"
                inputDirectory="${generatorDir}${psep}${basedir}/autotestlib"
                outputDirectory="${outputDir}/tests/autotest-generator"
                generatorDirectory="${generator.builddir}"
                typesystem="${basedir}/autotestlib/build.txt"
                header="${basedir}/autotestlib/masterinclude.h"
                qtincludedirectory="${qtjambi.qt.includedir}"
                qtlibdirectory="${tools.qt.libdir}"
                qtbindirectory="${tools.qt.bindir}"
                includepaths="${basedir}/autotestlib${psep}${generator.includepaths}"
                outputPreprocessFile="preprocessed_autotests.tmp"
            />
    </target>

    <target name="compile.native" depends="init.build">
        <qmake  dir="${outputDir}/tests/autotest-generator"
                pro="${basedir}/autotestlib/autotestlib.pro"
                config="${qtjambi.configuration}"
                qtconfig="${qtjambi.qtconfig}"
                debugTools="${qtjambi.debug-tools}"
                qmakebinary="${qtjambi.qt.qmake.abspath}"/>
        <make dir="${outputDir}/tests/autotest-generator" target="${qtjambi.qmake.target.default}"/>
        <if>
            <os family="mac"/>
            <then>
                <install-name-tool dir="${outputDir}/tests/lib/" libname="io_qt_autotests_generated" debug="false"/>
                <install-name-tool dir="${outputDir}/tests/lib/" libname="io_qt_autotests_generated" debug="true"/>
            </then>
        </if>
    </target>

    <target name="compile.deps">
<!--        <mkdir dir="${outputDir}/tests/autotests" />
        <javac destdir="${outputDir}/tests/autotests" debug="true"
                includeantruntime="false"
                source="1.8" target="1.8">
            <classpath>
                <pathelement location="${basedir}/deployment/qtjambi.jar" />
                <pathelement location="." />
            </classpath>
        </javac> -->
    </target>
    
    <target name="copy-resources">
        <copy todir="${outputDir}/tests/java" includeemptydirs="false">
            <fileset dir="${src}">
                <include name="**/*"/>
                <exclude name="**/.*"/>
                <exclude name="build.xml"/>
                <exclude name="**/*.java"/>
                <exclude name="**/*.jui"/>
                <exclude name="${jar.excludes}"/>
            </fileset>
        </copy>
    </target>

    <target name="compile.java" depends="init.build, compile.deps, check.junit, check.ssl">
        <delete dir="${outputDir}/tests/java" failonerror="no"/>
        <mkdir dir="${outputDir}/tests/java"/>
        <!-- encoding="UTF-8" required due to some file tests (I18N) using
        no ASCII/ISO-8859-1 characters and the MacOSX Java using "MacRoman"
        character set by default. -->
        <if>
            <istrue value="${java.module.based}"/>
            <then>
                <module-info outputDirectory="${outputDir}/tests/autotest-generator/java" javaDirectory="${outputDir}/java"/>
                <javac destdir="${outputDir}/tests/java" debug="true"
                        includeantruntime="false"
                        source="${target.java.version}" target="${target.java.version}" encoding="UTF-8">
                    <compilerarg value="-Xlint:deprecation" />
                    <compilerarg value="-Xlint:unchecked" />
                    <compilerarg value="--add-exports" />
                    <compilerarg value="qtjambi/io.qt.internal=qtjambi.autotest" />
                    <modulepath>
                        <fileset dir="${basedir}/deployment/">
                            <include name="qtjambi-*${qtjambi.soname.version.minor}.jar"/>
                        </fileset>
                        <pathelement location="${tests.junit}" />
                        <pathelement location="${tests.hamcrest}" />
                    </modulepath>
                    <src path="${basedir}/src/java/autotest"/>
                    <!-- pick up the generated code from compile.native -->
                    <src path="${outputDir}/tests/autotest-generator/java"/>
                    <include name="io/qt/autotests/**/*.java"/>
                    <include name="io/qt/generatortests/**/*.java"/>
                    <include name="io/qt/unittests/**/*.java"/>
                    <exclude name="io/qt/autotests/**/*QPlastiqueStyle.java" if="${qt.feature.QT_NO_STYLE_PLASTIQUE}"/>
                    <exclude name="io/qt/autotests/**/TestCloneableOpenGL.java"/>
                    <exclude name="io/qt/autotests/**/TestDBus.java" unless="${qtjambi.dbus.any.true}"/>
                    <exclude name="io/qt/unittests/**/TestBluetooth.java" unless="${qtjambi.bluetooth.any.true}"/>
                    <exclude name="io/qt/autotests/**/TestInterfacesScriptable.java" unless="${qtjambi.script.any.true}"/>
                    <exclude name="io/qt/autotests/**/TestWebEngine.java" unless="${qtjambi.webengine.any.true}"/>
                    <exclude name="io/qt/autotests/**/TestWebView.java" unless="${qtjambi.webview.any.true}"/>
                    <exclude name="io/qt/autotests/**/TestCloneableWebkit.java" unless="${qtjambi.webkit.any.true}"/>
                    <exclude name="io/qt/autotests/**/TestCloneableScript.java" unless="${qtjambi.script.any.true}"/>
                    <exclude name="io/qt/autotests/**/TestSensors.java" unless="${qtjambi.sensors.any.true}"/>
                    <exclude name="io/qt/autotests/**/TestCloneableQt3D.java" unless="${qtjambi.qt3d.any.true}"/>
                    <exclude name="io/qt/autotests/**/TestMemoryManagementQt3D.java" unless="${qtjambi.qt3d.any.true}"/>
                    <exclude name="io/qt/autotests/**/TestCloneableDeclarative.java" unless="${qtjambi.declarative.any.true}"/>
                    <exclude name="io/qt/autotests/**/TestCloneableHelp.java" unless="${qtjambi.help.any.true}"/>
                    <exclude name="io/qt/autotests/**/TestCloneableMultimedia.java" unless="${qtjambi.multimedia.any.true}"/>
                    <exclude name="io/qt/autotests/**/TestCloneableXmlpatterns.java" unless="${qtjambi.xmlpatterns.any.true}"/>
                    <exclude name="io/qt/autotests/**/TestCloneableSQL.java" unless="${qtjambi.sql.any.true}"/>
                    <exclude name="io/qt/autotests/**/TestInjectedCodeV2LookupHost.java" if="qtjambi.javac.sunjdk5.compiler"/>
                    <exclude name="io/qt/autotests/**/TestInjectedCodeOpenGL.java"/>
                    <exclude name="io/qt/autotests/**/TestInjectedCodeSQL.java" unless="${qtjambi.sql.any.true}"/>
                    <exclude name="**/io/qt/autotests/**/TestInjectedCodeBluetooth.java" unless="${qtjambi.bluetooth.any.true}"/>
                    <exclude name="**/io/qt/autotests/**/TestInjectedCodeLocation.java" unless="${qtjambi.location.any.true}"/>
                    <exclude name="**/io/qt/autotests/**/TestInjectedCodeRemoteObjects.java" unless="${qtjambi.remoteobjects.any.true}"/>
                    <exclude name="**/io/qt/autotests/**/TestInjectedCodeMultimedia.java" unless="${qtjambi.multimedia.any.true}"/>
                    <exclude name="io/qt/unittests/**/TestQSslSocket.java" unless="qtjambi.ssl" /><!--depends on ssl-->
                    <exclude name="io/qt/unittests/**/TestQScript*.java" unless="${qtjambi.script.any.true}"/>
                    <exclude name="io/qt/unittests/**/TestQXmlFormatter.java" unless="${qtjambi.xmlpattern.any.true}"/>
                    <!-- MacOSX version of Qt does not have this API -->
                    <exclude name="io/qt/unittests/TestXmlQXmlStreamReader.java" if="qtjambi.config.ismacosx"/>
                </javac>
            </then>
            <else>
                <javac destdir="${outputDir}/tests/java" debug="true"
                        includeantruntime="false"
                        source="${target.java.version}" target="${target.java.version}" encoding="UTF-8">
                    <compilerarg value="-Xlint:deprecation" />
                    <compilerarg value="-Xlint:unchecked" />
                    <classpath>
                        <fileset dir="${basedir}/deployment/">
                            <include name="qtjambi-*${qtjambi.soname.version.minor}.jar"/>
                        </fileset>
                        <pathelement location="${tests.junit}" />
                        <pathelement location="${tests.hamcrest}" />
                    </classpath>
                    <src path="${basedir}/src/java/autotest"/>
                    <!-- pick up the generated code from compile.native -->
                    <src path="${outputDir}/tests/autotest-generator/java"/>
                    <include name="io/qt/autotests/**/*.java"/>
                    <include name="io/qt/generatortests/**/*.java"/>
                    <include name="io/qt/unittests/**/*.java"/>
                    <exclude name="io/qt/autotests/**/*QPlastiqueStyle.java" if="${qt.feature.QT_NO_STYLE_PLASTIQUE}"/>
                    <exclude name="io/qt/autotests/**/TestCloneableOpenGL.java"/>
                    <exclude name="io/qt/autotests/**/TestDBus.java" unless="${qtjambi.dbus.any.true}"/>
                    <exclude name="io/qt/unittests/**/TestBluetooth.java" unless="${qtjambi.bluetooth.any.true}"/>
                    <exclude name="io/qt/autotests/**/TestInterfacesScriptable.java" unless="${qtjambi.script.any.true}"/>
                    <exclude name="io/qt/autotests/**/TestWebEngine.java" unless="${qtjambi.webengine.any.true}"/>
                    <exclude name="io/qt/autotests/**/TestWebView.java" unless="${qtjambi.webview.any.true}"/>
                    <exclude name="io/qt/autotests/**/TestCloneableWebkit.java" unless="${qtjambi.webkit.any.true}"/>
                    <exclude name="io/qt/autotests/**/TestCloneableScript.java" unless="${qtjambi.script.any.true}"/>
                    <exclude name="io/qt/autotests/**/TestSensors.java" unless="${qtjambi.sensors.any.true}"/>
                    <exclude name="io/qt/autotests/**/TestCloneableQt3D.java" unless="${qtjambi.qt3d.any.true}"/>
                    <exclude name="io/qt/autotests/**/TestMemoryManagementQt3D.java" unless="${qtjambi.qt3d.any.true}"/>
                    <exclude name="io/qt/autotests/**/TestCloneableDeclarative.java" unless="${qtjambi.declarative.any.true}"/>
                    <exclude name="io/qt/autotests/**/TestCloneableHelp.java" unless="${qtjambi.help.any.true}"/>
                    <exclude name="io/qt/autotests/**/TestCloneableMultimedia.java" unless="${qtjambi.multimedia.any.true}"/>
                    <exclude name="io/qt/autotests/**/TestCloneableXmlpatterns.java" unless="${qtjambi.xmlpatterns.any.true}"/>
                    <exclude name="io/qt/autotests/**/TestCloneableSQL.java" unless="${qtjambi.sql.any.true}"/>
                    <exclude name="io/qt/autotests/**/TestInjectedCodeV2LookupHost.java" if="qtjambi.javac.sunjdk5.compiler"/>
                    <exclude name="io/qt/autotests/**/TestInjectedCodeOpenGL.java"/>
                    <exclude name="io/qt/autotests/**/TestInjectedCodeSQL.java" unless="${qtjambi.sql.any.true}"/>
                    <exclude name="**/io/qt/autotests/**/TestInjectedCodeBluetooth.java" unless="${qtjambi.bluetooth.any.true}"/>
                    <exclude name="**/io/qt/autotests/**/TestInjectedCodeLocation.java" unless="${qtjambi.location.any.true}"/>
                    <exclude name="**/io/qt/autotests/**/TestInjectedCodeRemoteObjects.java" unless="${qtjambi.remoteobjects.any.true}"/>
                    <exclude name="**/io/qt/autotests/**/TestInjectedCodeMultimedia.java" unless="${qtjambi.multimedia.any.true}"/>
                    <exclude name="io/qt/unittests/**/TestQSslSocket.java" unless="qtjambi.ssl" /><!--depends on ssl-->
                    <exclude name="io/qt/unittests/**/TestQScript*.java" unless="${qtjambi.script.any.true}"/>
                    <exclude name="io/qt/unittests/**/TestQXmlFormatter.java" unless="${qtjambi.xmlpattern.any.true}"/>
                    <!-- MacOSX version of Qt does not have this API -->
                    <exclude name="io/qt/unittests/TestXmlQXmlStreamReader.java" if="qtjambi.config.ismacosx"/>
                </javac>
            </else>
        </if>
        <antcall inheritrefs="true" target="copy-resources">
            <param name="src" value="${basedir}/src/java/autotest"/>
        </antcall>
        <ant antfile="${basedir}/src/java/qtjambi-qml/qml.xml" inheritrefs="true" target="build">
            <property name="qtjambi.test.qmlmodule" value="true"/>
        </ant>
    </target>

    <target name="run.test" depends="init.test, check.junit">
        <qtjambi-resolve-path var="absOutputDir"     path="${outputDir}" />
        <if>
            <os family="windows"/>
            <then>
                <qtjambi-resolve-path var="absQtPath"         path="${qtBin}" />
                <qtjambi-resolve-path var="absJambiPath"      path="${jambiBin}" />
            </then>
            <else>
                <qtjambi-resolve-path var="absQtPath"         path="${qtLib}" />
                <qtjambi-resolve-path var="absJambiPath"      path="${jambiLib}" />
            </else>
        </if>
        <qtjambi-resolve-path var="absNativeBaseDir" path="${nativeBaseDir}" />
        <condition property="env.qtjambi.debug.trace" value="QTJAMBI_DEBUG_TRACE" else="QTJAMBI_DEBUG_TRACE_DISABLED">
            <istrue value="${qtjambi.debug.trace}"/>
        </condition>
        <if>
            <available type="file" file="${sqlite.jdbc}"/>
            <then>
            </then>
            <else>
                <mkdir dir="extjars"/>
                <get src="${sqlite.jdbc.download.url}" dest="${sqlite.jdbc}" verbose="true"/>
            </else>
        </if>
        <if>
            <os family="mac"/>
            <then>
                <property name="XstartOnFirstThread" value="-XstartOnFirstThread" />
            </then>
            <else>
                <property name="XstartOnFirstThread" value="-Dx" />
            </else>
        </if>
        <delete dir="${outputDir}/tests/junitxml-${kind}" />
        <delete dir="${outputDir}/tests/TestResults-${kind}" />
        <mkdir dir="${outputDir}/tests/junitxml-${kind}"/>
        <mkdir dir="${outputDir}/tests/TestResults-${kind}"/>
        <!-- files contained in todir being accessed from the tests -->
        <copy todir="${outputDir}/tests/auto/io/qt/autotests">
            <fileset dir="src/java/autotest/io/qt/autotests" excludes="**/*.java"/>
        </copy>
        <copy todir="${outputDir}/tests/auto/io/qt/unittests">
            <fileset dir="src/java/autotest/io/qt/unittests" excludes="**/*.java"/>
        </copy>
        <if>
            <not>
                <os family="windows"/>
            </not>
            <then>
                <symlink link="${outputDir}/tests/${kind}/lib" resource="${deploymentdir}/${qtjambi.osname}/${qtjambi.compiler}/${kind}/lib"/>
            </then>
        </if>
        <junit fork="yes" printsummary="true" haltonfailure="no" timeout="600000" showoutput="yes" logfailedtests="yes">
            <classpath>
                <fileset dir="${basedir}/deployment/">
                    <include name="qtjambi-*${qtjambi.soname.version.minor}.jar"/>
                </fileset>
                <pathelement location="${tests.junit}" />
                <pathelement location="${tests.hamcrest}" />
                <pathelement location="${sqlite.jdbc}" />
                <pathelement path="${absOutputDir}/tests/java" />
            </classpath>
            <jvmarg value="-Djava.library.path=${absQtPath}${psep}${absJambiPath}${psep}${outputDir}/tests/bin${psep}${outputDir}/tests/lib"/>
            <jvmarg value="-Dio.qt.verbose-loading=${io.qt.verbose-loading}"/>
            <jvmarg value="-Dio.qt.debug=${kind}"/><!-- This should not be needed now, it loads default from MANIFEST.MF -->
            <jvmarg value="-Dio.qt.debug.inhibitNativeResourceThread=true"/>
            <jvmarg value="-Dio.qt.debug.level=${io.qt.debug.level}"/>
            <jvmarg value="-Dio.qt.exceptions-for-messages=none"/>
            <jvmarg value="${XstartOnFirstThread}"/>
            <jvmarg value="-Xrs"/><!-- This stops JVM intercepting SIGSEGV
            from native code (so we can see where/why it crashed) otherwise
            the JVM may promote SIGSEGV to NullPointerException, which is
            not that useful for debugging. -->
            <jvmarg value="-Xcheck:jni"/>
            <env key="${env.qtjambi.debug.trace}" value="1"/>
            <!--env key="PATH" path="${qtjambi.qt.bindir}${psep}${env.PATH}"/-->
            <env key="QT_MULTIMEDIA_PREFERRED_PLUGINS" value="Test"/>
            <!--env key="QML_IMPORT_PATH" value="${absQtPath}/../qml"/>
            <env key="QML2_IMPORT_PATH" value="${absQtPath}/../qml"/-->
<!--            <jvmarg value="-verbose"/> -->
            <formatter type="xml" usefile="yes" />
            <batchtest fork="yes" todir="${outputDir}/tests/junitxml-${kind}">
                <fileset dir="src/java/autotest">
                    <include name="**/io/qt/autotests/**/Test*.java"/>
                    <include name="**/io/qt/generatortests/**/Test*.java"/>
                    <include name="**/io/qt/unittests/**/Test*.java"/>
                    <exclude name="**/io/qt/autotests/**/TestMemoryManagement*.java" unless="${qtjambi.debug-tools}"/>
                    <exclude name="**/io/qt/autotests/**/*QPlastiqueStyle.java"/> <!-- if="${qt.feature.QT_NO_STYLE_PLASTIQUE}"-->
                    <exclude name="**/io/qt/autotests/**/TestCloneableOpenGL.java"/>
                    <exclude name="**/io/qt/autotests/**/TestCloneableSQL.java" unless="${qtjambi.sql.any.true}"/>
                    <exclude name="**/io/qt/autotests/**/TestInjectedCodeV2LookupHost.java" if="qtjambi.javac.sunjdk5.compiler"/>
                    <exclude name="**/io/qt/autotests/**/TestInjectedCodeOpenGL.java"/>
                    <exclude name="**/io/qt/autotests/**/TestDBus.java" unless="${qtjambi.dbus.any.true}"/>
                    <exclude name="**/io/qt/unittests/**/TestBluetooth.java" unless="${qtjambi.bluetooth.any.true}"/>
                    <exclude name="**/io/qt/autotests/**/TestInterfacesScriptable.java" unless="${qtjambi.script.any.true}"/>
                    <exclude name="**/io/qt/autotests/**/TestWebEngine.java" unless="${qtjambi.webengine.any.true}"/>
                    <exclude name="**/io/qt/autotests/**/TestWebView.java" unless="${qtjambi.webview.any.true}"/>
                    <exclude name="**/io/qt/autotests/**/TestSensors.java" unless="${qtjambi.sensors.any.true}"/>
                    <exclude name="**/io/qt/autotests/**/TestInjectedCodeSQL.java" unless="${qtjambi.sql.any.true}"/>
                    <exclude name="**/io/qt/autotests/**/TestInjectedCodeBluetooth.java" unless="${qtjambi.bluetooth.any.true}"/>
                    <exclude name="**/io/qt/autotests/**/TestInjectedCodeLocation.java" unless="${qtjambi.location.any.true}"/>
                    <exclude name="**/io/qt/autotests/**/TestInjectedCodeRemoteObjects.java" unless="${qtjambi.remoteobjects.any.true}"/>
                    <exclude name="**/io/qt/autotests/**/TestInjectedCodeMultimedia.java" unless="${qtjambi.multimedia.any.true}"/>
                    <exclude name="**/io/qt/autotests/**/TestCloneableWebkit.java" unless="${qtjambi.webkit.any.true}"/>
                    <exclude name="**/io/qt/autotests/**/TestCloneableScript.java" unless="${qtjambi.script.any.true}"/>
                    <exclude name="**/io/qt/autotests/**/TestCloneableDeclarative.java" unless="${qtjambi.declarative.any.true}"/>
                    <exclude name="**/io/qt/autotests/**/TestCloneableHelp.java" unless="${qtjambi.help.any.true}"/>
                    <exclude name="**/io/qt/autotests/**/TestCloneableMultimedia.java" unless="${qtjambi.multimedia.any.true}"/>
                    <exclude name="**/io/qt/autotests/**/TestCloneableXmlpatterns.java" unless="${qtjambi.xmlpatterns.any.true}"/>
                    <!-- MacOSX version of Qt does not have this API -->
                    <exclude name="**/io/qt/unittests/**/TestQSslSocket.java" unless="qtjambi.ssl" /><!--depends on ssl-->
                    <exclude name="**/io/qt/unittests/**/TestQScript*.java" unless="${qtjambi.script.any.true}"/>
                    <exclude name="**/io/qt/unittests/**/TestQXmlFormatter.java" unless="${qtjambi.xmlpattern.any.true}"/>
                    <exclude name="**/io/qt/unittests/TestXmlQXmlStreamReader.java" if="qtjambi.config.ismacosx"/>
                </fileset>
            </batchtest>
        </junit>
        <if>
            <not>
                <os family="windows"/>
            </not>
            <then>
                <symlink action="delete" link="${outputDir}/tests/${kind}/lib"/>
            </then>
        </if>
    </target>

    <target name="run" depends="init">
        <if>
            <available file="${deploymentdir}/${qtjambi.osname}/${qtjambi.compiler}/debug" type="dir"/>
            <then>
                <antcall target="debug.run"/>
            </then>
            <else>
                <if>
                    <available file="${deploymentdir}/${qtjambi.osname}/${qtjambi.compiler}/release" type="dir"/>
                    <then>
                        <antcall target="release.run"/>
                    </then>
                    <else>
                        <fail message="No build available."/>
                    </else>
                </if>
            </else>
        </if>
    </target>
    
    <target name="release.run" depends="init">
        <if>
            <available file="${deploymentdir}/${qtjambi.osname}/${qtjambi.compiler}/release" type="dir"/>
            <then>
                <antcall target="run.test">
                    <param name="kind"          value="release"/>
                    <param name="nativeBaseDir" value="${deploymentdir}/${qtjambi.osname}/${qtjambi.compiler}/release"/>
                    <param name="qtLib"         value="${deploymentdir}/${qtjambi.osname}/${qtjambi.compiler}/release/lib"/>
                    <param name="qtBin"         value="${deploymentdir}/${qtjambi.osname}/${qtjambi.compiler}/release/bin"/>
                    <param name="qtTools"       value="${deploymentdir}/${qtjambi.osname}/${qtjambi.compiler}/release/tools"/>
                    <param name="jambiLib"      value="${deploymentdir}/${qtjambi.osname}/${qtjambi.compiler}/release/lib"/>
                    <param name="jambiBin"      value="${deploymentdir}/${qtjambi.osname}/${qtjambi.compiler}/release/bin"/>
                </antcall>
                <junitreport todir="${outputDir}/tests/junitxml-release">
                    <fileset dir="${outputDir}/tests/junitxml-release">
                        <include name="TEST-*.xml" />
                    </fileset>
                    <report format="frames" todir="${outputDir}/tests/TestResults-release" />
                </junitreport>
            </then>
            <else>
                <fail message="No release build available."/>
            </else>
        </if>
    </target>
    
    <target name="debug.run" depends="init">
        <if>
            <available file="${deploymentdir}/${qtjambi.osname}/${qtjambi.compiler}/debug" type="dir"/>
            <then>
                <antcall target="run.test">
                    <param name="kind"          value="debug"/>
                    <param name="nativeBaseDir" value="${deploymentdir}/${qtjambi.osname}/${qtjambi.compiler}/debug"/>
                    <param name="qtLib"         value="${deploymentdir}/${qtjambi.osname}/${qtjambi.compiler}/debug/lib"/>
                    <param name="qtBin"         value="${deploymentdir}/${qtjambi.osname}/${qtjambi.compiler}/debug/bin"/>
                    <param name="qtTools"       value="${deploymentdir}/${qtjambi.osname}/${qtjambi.compiler}/debug/tools"/>
                    <param name="jambiLib"      value="${deploymentdir}/${qtjambi.osname}/${qtjambi.compiler}/debug/lib"/>
                    <param name="jambiBin"      value="${deploymentdir}/${qtjambi.osname}/${qtjambi.compiler}/debug/bin"/>
                </antcall>
                <junitreport todir="${outputDir}/tests/junitxml-debug">
                    <fileset dir="${outputDir}/tests/junitxml-debug">
                        <include name="TEST-*.xml" />
                    </fileset>
                    <report format="frames" todir="${outputDir}/tests/TestResults-debug" />
                </junitreport>
            </then>
            <else>
                <fail message="No debug build available."/>
            </else>
        </if>
    </target>
    
    <target name="tests.generate"
            depends="init.build, compile.native.generator, compile.native, compile.java" description="Generates and builds all tests"/>

    <target name="tests.compile"
            depends="init.build, compile.native, compile.java" description="Builds all tests without recalling generator"/>

    <target name="tests.run"
            depends="init.build, init.test, setenv, run" description="Runs tests and generates report in TestReport subdir"/>

    <target name="tests.release.run"
            depends="init.build, init.test, setenv, release.run" description="Runs tests on the release build and generates report in TestReport subdir"/>

    <target name="tests.debug.run"
            depends="init.build, init.test, setenv, debug.run" description="Runs tests on the debug build and generates report in TestReport subdir"/>

</project>
