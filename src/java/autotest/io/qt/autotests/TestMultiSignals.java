/****************************************************************************
**
** Copyright (C) 2009-2021 Dr. Peter Droste, Omix Visualization GmbH & Co. KG. All rights reserved.
**
** This file is part of Qt Jambi.
**
** ** $BEGIN_LICENSE$
** GNU Lesser General Public License Usage
** This file may be used under the terms of the GNU Lesser
** General Public License version 2.1 as published by the Free Software
** Foundation and appearing in the file LICENSE.LGPL included in the
** packaging of this file.  Please review the following information to
** ensure the GNU Lesser General Public License version 2.1 requirements
** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
** 
** GNU General Public License Usage
** Alternatively, this file may be used under the terms of the GNU
** General Public License version 3.0 as published by the Free Software
** Foundation and appearing in the file LICENSE.GPL included in the
** packaging of this file.  Please review the following information to
** ensure the GNU General Public License version 3.0 requirements will be
** met: http://www.gnu.org/copyleft/gpl.html.
** $END_LICENSE$
**
** This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
** WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
**
****************************************************************************/
package io.qt.autotests;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertNull;
import static org.junit.Assert.assertTrue;

import org.junit.Test;

import io.qt.QNoSuchSignalException;
import io.qt.autotests.generated.MultiSignalTest;

public class TestMultiSignals extends QApplicationTest {
    private static class Receiver{
    	boolean received;
    	String receivedS;
    	Integer receivedI;
    	Boolean receivedB;
    	
    	void receiveI(int i) {
    		receivedI = i;
    		received = true;
    	}
    	
    	void receiveIS(int i, String s) {
    		receivedS = s;
    		receivedI = i;
    		received = true;
    	}
    	
    	void receiveBI(boolean b, int i) {
    		receivedB = b;
    		receivedI = i;
    		received = true;
    	}
    	
    	void receiveBIS(boolean b, int i, String s) {
    		receivedS = s;
    		receivedB = b;
    		receivedI = i;
    		received = true;
    	}
    	
    	void receiveBS(boolean b, String s) {
    		receivedS = s;
    		receivedB = b;
    		received = true;
    	}
    	
    	void receiveIB(int i, boolean b) {
    		receivedB = b;
    		receivedI = i;
    		received = true;
    	}
    	
    	void receiveSI(String s, int i) {
    		receivedS = s;
    		receivedI = i;
    		received = true;
    	}
    	
    	void receiveS(String s) {
    		receivedS = s;
    		received = true;
    	}
    	
    	void receiveB(boolean b) {
    		receivedB = b;
    		received = true;
    	}
    	
    	void receive0() {
    		received = true;
    	}
    	
    	void reset() {
    		receivedS = null;
    		receivedI = null;
    		receivedB = null;
    		received = false;
    	}
    }

    @Test
    public void test_emit_MultiSignal() {
    	MultiSignalTest sender = new MultiSignalTest();
    	Receiver receiver = new Receiver();
    	assertNull(receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertFalse(receiver.received);
    	
    	assertTrue(sender.multiSignal1.overload().connect(receiver::receive0)!=null);
    	sender.emit_multiSignal1();
    	assertNull(receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertTrue(receiver.received);
    	assertTrue(sender.multiSignal1.overload().disconnect(receiver::receive0));

    	receiver.reset();
    	sender.emit_multiSignal1();
    	assertNull(receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertFalse(receiver.received);

    	assertTrue(sender.multiSignal1.overload(int.class).connect(receiver::receive0)!=null);
    	receiver.reset();
    	assertNull(receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertFalse(receiver.received);

    	sender.emit_multiSignal1();
    	assertNull(receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertFalse(receiver.received);

    	sender.emit_multiSignal1(164);
    	assertNull(receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertTrue(receiver.received);
    	assertTrue(sender.multiSignal1.overload(int.class).disconnect(receiver::receive0));

    	assertTrue(sender.multiSignal1.overload(int.class, String.class).connect(receiver::receive0)!=null);
    	receiver.reset();
    	sender.emit_multiSignal1(104, "E");
    	assertNull(receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertTrue(receiver.received);
    	assertTrue(sender.multiSignal1.overload(int.class, String.class).disconnect(receiver::receive0));
    	receiver.reset();
    	
    	try {
			sender.multiSignal1.overload(boolean.class).connect(receiver::receive0);
			assertTrue("should throw QNoSuchSignalException", false);
		} catch (QNoSuchSignalException e) {
		}

    	sender.multiSignal1.overload(int.class).connect(receiver::receiveI);
    	receiver.reset();
    	sender.emit_multiSignal1(648);
    	assertNull(receiver.receivedS);
    	assertEquals(Integer.valueOf(648), receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertTrue(receiver.received);
    	sender.multiSignal1.overload(int.class).disconnect(receiver::receiveI);

    	sender.multiSignal1.overload(int.class, String.class).connect(receiver::receiveI);
    	receiver.reset();
    	sender.emit_multiSignal1(967, "X");
    	assertNull(receiver.receivedS);
    	assertEquals(Integer.valueOf(967), receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertTrue(receiver.received);
    	sender.multiSignal1.overload(int.class, String.class).disconnect(receiver::receiveI);

    	sender.multiSignal1.overload(int.class, String.class).connect(receiver::receiveIS);
    	receiver.reset();
    	sender.emit_multiSignal1(967, "Q");
    	assertEquals("Q", receiver.receivedS);
    	assertEquals(Integer.valueOf(967), receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertTrue(receiver.received);
    	sender.multiSignal1.overload(int.class, String.class).disconnect(receiver::receiveIS);
    	
    	sender.multiSignal1.overload().connect(receiver::receive0);
    	receiver.reset();
    	sender.multiSignal1.emit();
    	assertNull(receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertTrue(receiver.received);
    	sender.multiSignal1.overload().disconnect(receiver::receive0);

    	sender.multiSignal1.overload(int.class).connect(receiver::receive0);
    	receiver.reset();
    	sender.multiSignal1.emit();
    	assertNull(receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertFalse(receiver.received);
    	sender.multiSignal1.emit(9473);
    	assertNull(receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertTrue(receiver.received);
    	sender.multiSignal1.overload(int.class).disconnect(receiver::receive0);

    	sender.multiSignal1.overload(int.class, String.class).connect(receiver::receive0);
    	receiver.reset();
    	sender.multiSignal1.emit(9473, "O");
    	assertNull(receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertTrue(receiver.received);
    	sender.multiSignal1.overload(int.class, String.class).disconnect(receiver::receive0);
    	receiver.reset();
    	
    	sender.multiSignal1.overload(int.class).connect(receiver::receiveI);
    	receiver.reset();
    	sender.multiSignal1.emit(648);
    	assertNull(receiver.receivedS);
    	assertEquals(Integer.valueOf(648), receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertTrue(receiver.received);
    	sender.multiSignal1.overload(int.class).disconnect(receiver::receiveI);

    	sender.multiSignal1.overload(int.class, String.class).connect(receiver::receiveI);
    	receiver.reset();
    	sender.multiSignal1.emit(967, "P");
    	assertNull(receiver.receivedS);
    	assertEquals(Integer.valueOf(967), receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertTrue(receiver.received);
    	sender.multiSignal1.overload(int.class, String.class).disconnect(receiver::receiveI);

    	sender.multiSignal1.overload(int.class, String.class).connect(receiver::receiveIS);
    	receiver.reset();
    	sender.multiSignal1.emit(967, "Q");
    	assertEquals("Q", receiver.receivedS);
    	assertEquals(Integer.valueOf(967), receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertTrue(receiver.received);
    	sender.multiSignal1.overload(int.class, String.class).disconnect(receiver::receiveIS);
    	
    	sender.multiSignal2.overload(String.class).connect(receiver::receive0);
    	receiver.reset();
    	sender.emit_multiSignal2(1);
    	sender.emit_multiSignal2(true);
    	sender.emit_multiSignal2("X");
    	assertNull(receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertTrue(receiver.received);
    	sender.multiSignal2.overload(String.class).disconnect(receiver::receive0);
    	
    	sender.multiSignal2.overload(int.class).connect(receiver::receive0);
    	receiver.reset();
    	sender.emit_multiSignal2(1);
    	sender.emit_multiSignal2(true);
    	sender.emit_multiSignal2("X");
    	assertNull(receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertTrue(receiver.received);
    	sender.multiSignal2.overload(int.class).disconnect(receiver::receive0);
    	
    	sender.multiSignal2.overload(boolean.class).connect(receiver::receive0);
    	receiver.reset();
    	sender.emit_multiSignal2(1);
    	sender.emit_multiSignal2(true);
    	sender.emit_multiSignal2("X");
    	assertNull(receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertTrue(receiver.received);
    	sender.multiSignal2.overload(boolean.class).disconnect(receiver::receive0);
    	
    	sender.multiSignal2.overload(String.class).connect(receiver::receiveS);
    	receiver.reset();
    	sender.emit_multiSignal2(1);
    	sender.emit_multiSignal2(true);
    	sender.emit_multiSignal2("X");
    	assertEquals("X", receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertTrue(receiver.received);
    	sender.multiSignal2.overload(String.class).disconnect(receiver::receiveS);
    	
    	sender.multiSignal2.overload(int.class).connect(receiver::receiveI);
    	receiver.reset();
    	sender.emit_multiSignal2(1);
    	sender.emit_multiSignal2(true);
    	sender.emit_multiSignal2("X");
    	assertNull(receiver.receivedS);
    	assertEquals(Integer.valueOf(1), receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertTrue(receiver.received);
    	sender.multiSignal2.overload(int.class).disconnect(receiver::receiveI);
    	
    	sender.multiSignal2.overload(boolean.class).connect(receiver::receiveB);
    	receiver.reset();
    	sender.emit_multiSignal2(1);
    	sender.emit_multiSignal2(true);
    	sender.emit_multiSignal2("X");
    	assertNull(receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertEquals(Boolean.TRUE, receiver.receivedB);
    	assertTrue(receiver.received);
    	sender.multiSignal2.overload(boolean.class).disconnect(receiver::receiveB);
    	
    	sender.multiSignal2.overload(String.class).connect(receiver::receive0);
    	receiver.reset();
    	sender.multiSignal2.emit(1);
    	sender.multiSignal2.emit(true);
    	sender.multiSignal2.emit("X");
    	assertNull(receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertTrue(receiver.received);
    	sender.multiSignal2.overload(String.class).disconnect(receiver::receive0);
    	
    	sender.multiSignal2.overload(int.class).connect(receiver::receive0);
    	receiver.reset();
    	sender.multiSignal2.emit(1);
    	sender.multiSignal2.emit(true);
    	sender.multiSignal2.emit("X");
    	assertNull(receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertTrue(receiver.received);
    	sender.multiSignal2.overload(int.class).disconnect(receiver::receive0);
    	
    	sender.multiSignal2.overload(boolean.class).connect(receiver::receive0);
    	receiver.reset();
    	sender.multiSignal2.emit(1);
    	sender.multiSignal2.emit(true);
    	sender.multiSignal2.emit("X");
    	assertNull(receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertTrue(receiver.received);
    	sender.multiSignal2.overload(boolean.class).disconnect(receiver::receive0);
    	
    	sender.multiSignal2.overload(String.class).connect(receiver::receiveS);
    	receiver.reset();
    	sender.multiSignal2.emit(1);
    	sender.multiSignal2.emit(true);
    	sender.multiSignal2.emit("X");
    	assertEquals("X", receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertTrue(receiver.received);
    	sender.multiSignal2.overload(String.class).disconnect(receiver::receiveS);
    	
    	sender.multiSignal2.overload(int.class).connect(receiver::receiveI);
    	receiver.reset();
    	sender.multiSignal2.emit(1);
    	sender.multiSignal2.emit(true);
    	sender.multiSignal2.emit("X");
    	assertNull(receiver.receivedS);
    	assertEquals(Integer.valueOf(1), receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertTrue(receiver.received);
    	sender.multiSignal2.overload(int.class).disconnect(receiver::receiveI);
    	
    	sender.multiSignal2.overload(boolean.class).connect(receiver::receiveB);
    	receiver.reset();
    	sender.multiSignal2.emit(1);
    	sender.multiSignal2.emit(true);
    	sender.multiSignal2.emit("X");
    	assertNull(receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertEquals(Boolean.TRUE, receiver.receivedB);
    	assertTrue(receiver.received);
    	sender.multiSignal2.overload(boolean.class).disconnect(receiver::receiveB);
    	
    	sender.multiSignal3.overload(int.class).connect(receiver::receive0);
    	receiver.reset();
    	sender.emit_multiSignal3();
    	assertNull(receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertFalse(receiver.received);
    	receiver.reset();
    	sender.emit_multiSignal3(true);
    	assertNull(receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertFalse(receiver.received);
    	receiver.reset();
    	sender.emit_multiSignal3(8);
    	assertNull(receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertTrue(receiver.received);
    	receiver.reset();
    	sender.emit_multiSignal3("X");
    	assertNull(receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertFalse(receiver.received);
    	sender.multiSignal3.overload(int.class).disconnect(receiver::receive0);
    	
    	sender.multiSignal3.overload(boolean.class).connect(receiver::receive0);
    	receiver.reset();
    	sender.emit_multiSignal3();
    	assertNull(receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertFalse(receiver.received);
    	receiver.reset();
    	sender.emit_multiSignal3(true);
    	assertNull(receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertTrue(receiver.received);
    	receiver.reset();
    	sender.emit_multiSignal3(8);
    	assertNull(receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertFalse(receiver.received);
    	receiver.reset();
    	sender.emit_multiSignal3("X");
    	assertNull(receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertFalse(receiver.received);
    	sender.multiSignal3.overload(boolean.class).disconnect(receiver::receive0);
    	
    	sender.multiSignal3.overload(String.class).connect(receiver::receive0);
    	receiver.reset();
    	sender.emit_multiSignal3();
    	assertNull(receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertTrue(receiver.received);
    	receiver.reset();
    	sender.emit_multiSignal3(true);
    	assertNull(receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertFalse(receiver.received);
    	receiver.reset();
    	sender.emit_multiSignal3(8);
    	assertNull(receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertFalse(receiver.received);
    	receiver.reset();
    	sender.emit_multiSignal3("X");
    	assertNull(receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertTrue(receiver.received);
    	sender.multiSignal3.overload(String.class).disconnect(receiver::receive0);
    	
    	sender.multiSignal3.overload(int.class).connect(receiver::receiveI);
    	receiver.reset();
    	sender.emit_multiSignal3();
    	assertNull(receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertFalse(receiver.received);
    	receiver.reset();
    	sender.emit_multiSignal3(true);
    	assertNull(receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertFalse(receiver.received);
    	receiver.reset();
    	sender.emit_multiSignal3(8);
    	assertNull(receiver.receivedS);
    	assertEquals(Integer.valueOf(8), receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertTrue(receiver.received);
    	receiver.reset();
    	sender.emit_multiSignal3("X");
    	assertNull(receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertFalse(receiver.received);
    	sender.multiSignal3.overload(int.class).disconnect(receiver::receiveI);
    	
    	sender.multiSignal3.overload(boolean.class).connect(receiver::receiveB);
    	receiver.reset();
    	sender.emit_multiSignal3();
    	assertNull(receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertFalse(receiver.received);
    	receiver.reset();
    	sender.emit_multiSignal3(true);
    	assertNull(receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertEquals(Boolean.TRUE, receiver.receivedB);
    	assertTrue(receiver.received);
    	receiver.reset();
    	sender.emit_multiSignal3(8);
    	assertNull(receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertFalse(receiver.received);
    	receiver.reset();
    	sender.emit_multiSignal3("X");
    	assertNull(receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertFalse(receiver.received);
    	sender.multiSignal3.overload(boolean.class).disconnect(receiver::receiveB);
    	
    	sender.multiSignal3.overload(String.class).connect(receiver::receiveS);
    	receiver.reset();
    	sender.emit_multiSignal3();
    	assertEquals("TEST", receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertTrue(receiver.received);
    	receiver.reset();
    	sender.emit_multiSignal3(true);
    	assertNull(receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertFalse(receiver.received);
    	receiver.reset();
    	sender.emit_multiSignal3(8);
    	assertNull(receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertFalse(receiver.received);
    	receiver.reset();
    	sender.emit_multiSignal3("X");
    	assertEquals("X", receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertTrue(receiver.received);
    	sender.multiSignal3.overload(String.class).disconnect(receiver::receiveS);
    	
    	sender.multiSignal3.overload(int.class).connect(receiver::receive0);
    	receiver.reset();
    	sender.multiSignal3.emit();
    	assertNull(receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertFalse(receiver.received);
    	receiver.reset();
    	sender.multiSignal3.emit(true);
    	assertNull(receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertFalse(receiver.received);
    	receiver.reset();
    	sender.multiSignal3.emit(8);
    	assertNull(receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertTrue(receiver.received);
    	receiver.reset();
    	sender.multiSignal3.emit("X");
    	assertNull(receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertFalse(receiver.received);
    	sender.multiSignal3.overload(int.class).disconnect(receiver::receive0);
    	
    	sender.multiSignal3.overload(boolean.class).connect(receiver::receive0);
    	receiver.reset();
    	sender.multiSignal3.emit();
    	assertNull(receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertFalse(receiver.received);
    	receiver.reset();
    	sender.multiSignal3.emit(true);
    	assertNull(receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertTrue(receiver.received);
    	receiver.reset();
    	sender.multiSignal3.emit(8);
    	assertNull(receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertFalse(receiver.received);
    	receiver.reset();
    	sender.multiSignal3.emit("X");
    	assertNull(receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertFalse(receiver.received);
    	sender.multiSignal3.overload(boolean.class).disconnect(receiver::receive0);
    	
    	sender.multiSignal3.overload(String.class).connect(receiver::receive0);
    	receiver.reset();
    	sender.multiSignal3.emit();
    	assertNull(receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertTrue(receiver.received);
    	receiver.reset();
    	sender.multiSignal3.emit(true);
    	assertNull(receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertFalse(receiver.received);
    	receiver.reset();
    	sender.multiSignal3.emit(8);
    	assertNull(receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertFalse(receiver.received);
    	receiver.reset();
    	sender.multiSignal3.emit("X");
    	assertNull(receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertTrue(receiver.received);
    	sender.multiSignal3.overload(String.class).disconnect(receiver::receive0);
    	
    	sender.multiSignal3.overload(int.class).connect(receiver::receiveI);
    	receiver.reset();
    	sender.multiSignal3.emit();
    	assertNull(receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertFalse(receiver.received);
    	receiver.reset();
    	sender.multiSignal3.emit(true);
    	assertNull(receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertFalse(receiver.received);
    	receiver.reset();
    	sender.multiSignal3.emit(8);
    	assertNull(receiver.receivedS);
    	assertEquals(Integer.valueOf(8), receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertTrue(receiver.received);
    	receiver.reset();
    	sender.multiSignal3.emit("X");
    	assertNull(receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertFalse(receiver.received);
    	sender.multiSignal3.overload(int.class).disconnect(receiver::receiveI);
    	
    	sender.multiSignal3.overload(boolean.class).connect(receiver::receiveB);
    	receiver.reset();
    	sender.multiSignal3.emit();
    	assertNull(receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertFalse(receiver.received);
    	receiver.reset();
    	sender.multiSignal3.emit(true);
    	assertNull(receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertEquals(Boolean.TRUE, receiver.receivedB);
    	assertTrue(receiver.received);
    	receiver.reset();
    	sender.multiSignal3.emit(8);
    	assertNull(receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertFalse(receiver.received);
    	receiver.reset();
    	sender.multiSignal3.emit("X");
    	assertNull(receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertFalse(receiver.received);
    	sender.multiSignal3.overload(boolean.class).disconnect(receiver::receiveB);
    	
    	sender.multiSignal3.overload(String.class).connect(receiver::receiveS);
    	receiver.reset();
    	sender.multiSignal3.emit();
    	assertEquals("TEST", receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertTrue(receiver.received);
    	receiver.reset();
    	sender.multiSignal3.emit(true);
    	assertNull(receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertFalse(receiver.received);
    	receiver.reset();
    	sender.multiSignal3.emit(8);
    	assertNull(receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertFalse(receiver.received);
    	receiver.reset();
    	sender.multiSignal3.emit("X");
    	assertEquals("X", receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertTrue(receiver.received);
    	sender.multiSignal3.overload(String.class).disconnect(receiver::receiveS);
    	
    	sender.multiSignal4.overload(String.class, int.class).connect(receiver::receive0);
    	receiver.reset();
    	sender.emit_multiSignal4(true);
    	assertNull(receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertFalse(receiver.received);
    	receiver.reset();
    	sender.emit_multiSignal4(8);
    	assertNull(receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertFalse(receiver.received);
    	receiver.reset();
    	sender.emit_multiSignal4("X");
    	assertNull(receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertTrue(receiver.received);
    	receiver.reset();
    	sender.emit_multiSignal4("X", 5);
    	assertNull(receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertTrue(receiver.received);
    	receiver.reset();
    	sender.emit_multiSignal4(8, true);
    	assertNull(receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertFalse(receiver.received);
    	receiver.reset();
    	sender.emit_multiSignal4(true, "Z");
    	assertNull(receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertFalse(receiver.received);
    	receiver.reset();
    	sender.emit_multiSignal4(true, 98, "Z");
    	assertNull(receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertFalse(receiver.received);
    	sender.multiSignal4.overload(String.class, int.class).disconnect(receiver::receive0);
    	
    	sender.multiSignal4.overload(int.class, boolean.class).connect(receiver::receive0);
    	receiver.reset();
    	sender.emit_multiSignal4(true);
    	assertNull(receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertFalse(receiver.received);
    	receiver.reset();
    	sender.emit_multiSignal4(8);
    	assertNull(receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertTrue(receiver.received);
    	receiver.reset();
    	sender.emit_multiSignal4("X");
    	assertNull(receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertFalse(receiver.received);
    	receiver.reset();
    	sender.emit_multiSignal4("X", 5);
    	assertNull(receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertFalse(receiver.received);
    	receiver.reset();
    	sender.emit_multiSignal4(8, true);
    	assertNull(receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertTrue(receiver.received);
    	receiver.reset();
    	sender.emit_multiSignal4(true, "Z");
    	assertNull(receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertFalse(receiver.received);
    	receiver.reset();
    	sender.emit_multiSignal4(true, 98, "Z");
    	assertNull(receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertFalse(receiver.received);
    	sender.multiSignal4.overload(int.class, boolean.class).disconnect(receiver::receive0);
    	
    	sender.multiSignal4.overload(boolean.class, String.class).connect(receiver::receive0);
    	receiver.reset();
    	sender.emit_multiSignal4(true);
    	assertNull(receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertTrue(receiver.received);
    	receiver.reset();
    	sender.emit_multiSignal4(8);
    	assertNull(receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertFalse(receiver.received);
    	receiver.reset();
    	sender.emit_multiSignal4("X");
    	assertNull(receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertFalse(receiver.received);
    	receiver.reset();
    	sender.emit_multiSignal4("X", 5);
    	assertNull(receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertFalse(receiver.received);
    	receiver.reset();
    	sender.emit_multiSignal4(8, true);
    	assertNull(receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertFalse(receiver.received);
    	receiver.reset();
    	sender.emit_multiSignal4(true, "Z");
    	assertNull(receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertTrue(receiver.received);
    	receiver.reset();
    	sender.emit_multiSignal4(true, 98, "Z");
    	assertNull(receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertFalse(receiver.received);
    	sender.multiSignal4.overload(boolean.class, String.class).disconnect(receiver::receive0);
    	
    	sender.multiSignal4.overload(boolean.class, int.class, String.class).connect(receiver::receive0);
    	receiver.reset();
    	sender.emit_multiSignal4(true);
    	assertNull(receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertFalse(receiver.received);
    	receiver.reset();
    	sender.emit_multiSignal4(8);
    	assertNull(receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertFalse(receiver.received);
    	receiver.reset();
    	sender.emit_multiSignal4("X");
    	assertNull(receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertFalse(receiver.received);
    	receiver.reset();
    	sender.emit_multiSignal4("X", 5);
    	assertNull(receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertFalse(receiver.received);
    	receiver.reset();
    	sender.emit_multiSignal4(8, true);
    	assertNull(receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertFalse(receiver.received);
    	receiver.reset();
    	sender.emit_multiSignal4(true, "Z");
    	assertNull(receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertFalse(receiver.received);
    	receiver.reset();
    	sender.emit_multiSignal4(true, 98, "Z");
    	assertNull(receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertTrue(receiver.received);
    	sender.multiSignal4.overload(boolean.class, int.class, String.class).disconnect(receiver::receive0);
    	
    	sender.multiSignal4.overload(String.class, int.class).connect(receiver::receiveS);
    	receiver.reset();
    	sender.emit_multiSignal4(true);
    	assertNull(receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertFalse(receiver.received);
    	receiver.reset();
    	sender.emit_multiSignal4(8);
    	assertNull(receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertFalse(receiver.received);
    	receiver.reset();
    	sender.emit_multiSignal4("X");
    	assertEquals("X", receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertTrue(receiver.received);
    	receiver.reset();
    	sender.emit_multiSignal4("X", 5);
    	assertEquals("X", receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertTrue(receiver.received);
    	receiver.reset();
    	sender.emit_multiSignal4(8, true);
    	assertNull(receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertFalse(receiver.received);
    	receiver.reset();
    	sender.emit_multiSignal4(true, "Z");
    	assertNull(receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertFalse(receiver.received);
    	receiver.reset();
    	sender.emit_multiSignal4(true, 98, "Z");
    	assertNull(receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertFalse(receiver.received);
    	sender.multiSignal4.overload(String.class, int.class).disconnect(receiver::receiveS);
    	
    	sender.multiSignal4.overload(int.class, boolean.class).connect(receiver::receiveI);
    	receiver.reset();
    	sender.emit_multiSignal4(true);
    	assertNull(receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertFalse(receiver.received);
    	receiver.reset();
    	sender.emit_multiSignal4(8);
    	assertNull(receiver.receivedS);
    	assertEquals(Integer.valueOf(8), receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertTrue(receiver.received);
    	receiver.reset();
    	sender.emit_multiSignal4("X");
    	assertNull(receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertFalse(receiver.received);
    	receiver.reset();
    	sender.emit_multiSignal4("X", 5);
    	assertNull(receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertFalse(receiver.received);
    	receiver.reset();
    	sender.emit_multiSignal4(8, true);
    	assertNull(receiver.receivedS);
    	assertEquals(Integer.valueOf(8), receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertTrue(receiver.received);
    	receiver.reset();
    	sender.emit_multiSignal4(true, "Z");
    	assertNull(receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertFalse(receiver.received);
    	receiver.reset();
    	sender.emit_multiSignal4(true, 98, "Z");
    	assertNull(receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertFalse(receiver.received);
    	sender.multiSignal4.overload(int.class, boolean.class).disconnect(receiver::receiveI);
    	
    	sender.multiSignal4.overload(boolean.class, String.class).connect(receiver::receiveB);
    	receiver.reset();
    	sender.emit_multiSignal4(true);
    	assertNull(receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertEquals(Boolean.TRUE, receiver.receivedB);
    	assertTrue(receiver.received);
    	receiver.reset();
    	sender.emit_multiSignal4(8);
    	assertNull(receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertFalse(receiver.received);
    	receiver.reset();
    	sender.emit_multiSignal4("X");
    	assertNull(receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertFalse(receiver.received);
    	receiver.reset();
    	sender.emit_multiSignal4("X", 5);
    	assertNull(receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertFalse(receiver.received);
    	receiver.reset();
    	sender.emit_multiSignal4(8, true);
    	assertNull(receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertFalse(receiver.received);
    	receiver.reset();
    	sender.emit_multiSignal4(true, "Z");
    	assertNull(receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertEquals(Boolean.TRUE, receiver.receivedB);
    	assertTrue(receiver.received);
    	receiver.reset();
    	sender.emit_multiSignal4(true, 98, "Z");
    	assertNull(receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertFalse(receiver.received);
    	sender.multiSignal4.overload(boolean.class, String.class).disconnect(receiver::receiveB);
    	
    	sender.multiSignal4.overload(boolean.class, int.class, String.class).connect(receiver::receiveB);
    	receiver.reset();
    	sender.emit_multiSignal4(true);
    	assertNull(receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertFalse(receiver.received);
    	receiver.reset();
    	sender.emit_multiSignal4(8);
    	assertNull(receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertFalse(receiver.received);
    	receiver.reset();
    	sender.emit_multiSignal4("X");
    	assertNull(receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertFalse(receiver.received);
    	receiver.reset();
    	sender.emit_multiSignal4("X", 5);
    	assertNull(receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertFalse(receiver.received);
    	receiver.reset();
    	sender.emit_multiSignal4(8, true);
    	assertNull(receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertFalse(receiver.received);
    	receiver.reset();
    	sender.emit_multiSignal4(true, "Z");
    	assertNull(receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertFalse(receiver.received);
    	receiver.reset();
    	sender.emit_multiSignal4(true, 98, "Z");
    	assertNull(receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertEquals(Boolean.TRUE, receiver.receivedB);
    	assertTrue(receiver.received);
    	sender.multiSignal4.overload(boolean.class, int.class, String.class).disconnect(receiver::receiveB);
    	
    	sender.multiSignal4.overload(String.class, int.class).connect(receiver::receiveSI);
    	receiver.reset();
    	sender.emit_multiSignal4(true);
    	assertNull(receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertFalse(receiver.received);
    	receiver.reset();
    	sender.emit_multiSignal4(8);
    	assertNull(receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertFalse(receiver.received);
    	receiver.reset();
    	sender.emit_multiSignal4("X");
    	assertEquals("X", receiver.receivedS);
    	assertEquals(Integer.valueOf(147), receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertTrue(receiver.received);
    	receiver.reset();
    	sender.emit_multiSignal4("X", 5);
    	assertEquals("X", receiver.receivedS);
    	assertEquals(Integer.valueOf(5), receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertTrue(receiver.received);
    	receiver.reset();
    	sender.emit_multiSignal4(8, true);
    	assertNull(receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertFalse(receiver.received);
    	receiver.reset();
    	sender.emit_multiSignal4(true, "Z");
    	assertNull(receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertFalse(receiver.received);
    	receiver.reset();
    	sender.emit_multiSignal4(true, 98, "Z");
    	assertNull(receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertFalse(receiver.received);
    	sender.multiSignal4.overload(String.class, int.class).disconnect(receiver::receiveSI);
    	
    	sender.multiSignal4.overload(int.class, boolean.class).connect(receiver::receiveIB);
    	receiver.reset();
    	sender.emit_multiSignal4(true);
    	assertNull(receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertFalse(receiver.received);
    	receiver.reset();
    	sender.emit_multiSignal4(8);
    	assertNull(receiver.receivedS);
    	assertEquals(Integer.valueOf(8), receiver.receivedI);
    	assertEquals(Boolean.TRUE, receiver.receivedB);
    	assertTrue(receiver.received);
    	receiver.reset();
    	sender.emit_multiSignal4("X");
    	assertNull(receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertFalse(receiver.received);
    	receiver.reset();
    	sender.emit_multiSignal4("X", 5);
    	assertNull(receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertFalse(receiver.received);
    	receiver.reset();
    	sender.emit_multiSignal4(8, true);
    	assertNull(receiver.receivedS);
    	assertEquals(Integer.valueOf(8), receiver.receivedI);
    	assertEquals(Boolean.TRUE, receiver.receivedB);
    	assertTrue(receiver.received);
    	receiver.reset();
    	sender.emit_multiSignal4(true, "Z");
    	assertNull(receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertFalse(receiver.received);
    	receiver.reset();
    	sender.emit_multiSignal4(true, 98, "Z");
    	assertNull(receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertFalse(receiver.received);
    	sender.multiSignal4.overload(int.class, boolean.class).disconnect(receiver::receiveIB);
    	
    	sender.multiSignal4.overload(boolean.class, String.class).connect(receiver::receiveBS);
    	receiver.reset();
    	sender.emit_multiSignal4(true);
    	assertEquals("TEST", receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertEquals(Boolean.TRUE, receiver.receivedB);
    	assertTrue(receiver.received);
    	receiver.reset();
    	sender.emit_multiSignal4(8);
    	assertNull(receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertFalse(receiver.received);
    	receiver.reset();
    	sender.emit_multiSignal4("X");
    	assertNull(receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertFalse(receiver.received);
    	receiver.reset();
    	sender.emit_multiSignal4("X", 5);
    	assertNull(receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertFalse(receiver.received);
    	receiver.reset();
    	sender.emit_multiSignal4(8, true);
    	assertNull(receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertFalse(receiver.received);
    	receiver.reset();
    	sender.emit_multiSignal4(true, "Z");
    	assertEquals("Z", receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertEquals(Boolean.TRUE, receiver.receivedB);
    	assertTrue(receiver.received);
    	receiver.reset();
    	sender.emit_multiSignal4(true, 98, "Z");
    	assertNull(receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertFalse(receiver.received);
    	sender.multiSignal4.overload(boolean.class, String.class).disconnect(receiver::receiveBS);
    	
    	sender.multiSignal4.overload(boolean.class, int.class, String.class).connect(receiver::receiveBI);
    	receiver.reset();
    	sender.emit_multiSignal4(true);
    	assertNull(receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertFalse(receiver.received);
    	receiver.reset();
    	sender.emit_multiSignal4(8);
    	assertNull(receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertFalse(receiver.received);
    	receiver.reset();
    	sender.emit_multiSignal4("X");
    	assertNull(receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertFalse(receiver.received);
    	receiver.reset();
    	sender.emit_multiSignal4("X", 5);
    	assertNull(receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertFalse(receiver.received);
    	receiver.reset();
    	sender.emit_multiSignal4(8, true);
    	assertNull(receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertFalse(receiver.received);
    	receiver.reset();
    	sender.emit_multiSignal4(true, "Z");
    	assertNull(receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertFalse(receiver.received);
    	receiver.reset();
    	sender.emit_multiSignal4(true, 98, "Z");
    	assertNull(receiver.receivedS);
    	assertEquals(Integer.valueOf(98), receiver.receivedI);
    	assertEquals(Boolean.TRUE, receiver.receivedB);
    	assertTrue(receiver.received);
    	sender.multiSignal4.overload(boolean.class, int.class, String.class).disconnect(receiver::receiveBI);
    	
    	sender.multiSignal4.overload(boolean.class, int.class, String.class).connect(receiver::receiveBIS);
    	receiver.reset();
    	sender.emit_multiSignal4(true);
    	assertNull(receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertFalse(receiver.received);
    	receiver.reset();
    	sender.emit_multiSignal4(8);
    	assertNull(receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertFalse(receiver.received);
    	receiver.reset();
    	sender.emit_multiSignal4("X");
    	assertNull(receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertFalse(receiver.received);
    	receiver.reset();
    	sender.emit_multiSignal4("X", 5);
    	assertNull(receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertFalse(receiver.received);
    	receiver.reset();
    	sender.emit_multiSignal4(8, true);
    	assertNull(receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertFalse(receiver.received);
    	receiver.reset();
    	sender.emit_multiSignal4(true, "Z");
    	assertNull(receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertFalse(receiver.received);
    	receiver.reset();
    	sender.emit_multiSignal4(true, 98, "Z");
    	assertEquals("Z", receiver.receivedS);
    	assertEquals(Integer.valueOf(98), receiver.receivedI);
    	assertEquals(Boolean.TRUE, receiver.receivedB);
    	assertTrue(receiver.received);
    	sender.multiSignal4.overload(boolean.class, int.class, String.class).disconnect(receiver::receiveBIS);

    	sender.multiSignal4.overload(String.class, int.class).connect(receiver::receive0);
    	receiver.reset();
    	sender.multiSignal4.emit(true);
    	assertNull(receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertFalse(receiver.received);
    	receiver.reset();
    	sender.multiSignal4.emit(8);
    	assertNull(receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertFalse(receiver.received);
    	receiver.reset();
    	sender.multiSignal4.emit("X");
    	assertNull(receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertTrue(receiver.received);
    	receiver.reset();
    	sender.multiSignal4.emit("X", 5);
    	assertNull(receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertTrue(receiver.received);
    	receiver.reset();
    	sender.multiSignal4.emit(8, true);
    	assertNull(receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertFalse(receiver.received);
    	receiver.reset();
    	sender.multiSignal4.emit(true, "Z");
    	assertNull(receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertFalse(receiver.received);
    	receiver.reset();
    	sender.multiSignal4.emit(true, 98, "Z");
    	assertNull(receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertFalse(receiver.received);
    	sender.multiSignal4.overload(String.class, int.class).disconnect(receiver::receive0);
    	
    	sender.multiSignal4.overload(int.class, boolean.class).connect(receiver::receive0);
    	receiver.reset();
    	sender.multiSignal4.emit(true);
    	assertNull(receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertFalse(receiver.received);
    	receiver.reset();
    	sender.multiSignal4.emit(8);
    	assertNull(receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertTrue(receiver.received);
    	receiver.reset();
    	sender.multiSignal4.emit("X");
    	assertNull(receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertFalse(receiver.received);
    	receiver.reset();
    	sender.multiSignal4.emit("X", 5);
    	assertNull(receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertFalse(receiver.received);
    	receiver.reset();
    	sender.multiSignal4.emit(8, true);
    	assertNull(receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertTrue(receiver.received);
    	receiver.reset();
    	sender.multiSignal4.emit(true, "Z");
    	assertNull(receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertFalse(receiver.received);
    	receiver.reset();
    	sender.multiSignal4.emit(true, 98, "Z");
    	assertNull(receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertFalse(receiver.received);
    	sender.multiSignal4.overload(int.class, boolean.class).disconnect(receiver::receive0);
    	
    	sender.multiSignal4.overload(boolean.class, String.class).connect(receiver::receive0);
    	receiver.reset();
    	sender.multiSignal4.emit(true);
    	assertNull(receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertTrue(receiver.received);
    	receiver.reset();
    	sender.multiSignal4.emit(8);
    	assertNull(receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertFalse(receiver.received);
    	receiver.reset();
    	sender.multiSignal4.emit("X");
    	assertNull(receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertFalse(receiver.received);
    	receiver.reset();
    	sender.multiSignal4.emit("X", 5);
    	assertNull(receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertFalse(receiver.received);
    	receiver.reset();
    	sender.multiSignal4.emit(8, true);
    	assertNull(receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertFalse(receiver.received);
    	receiver.reset();
    	sender.multiSignal4.emit(true, "Z");
    	assertNull(receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertTrue(receiver.received);
    	receiver.reset();
    	sender.multiSignal4.emit(true, 98, "Z");
    	assertNull(receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertFalse(receiver.received);
    	sender.multiSignal4.overload(boolean.class, String.class).disconnect(receiver::receive0);
    	
    	sender.multiSignal4.overload(boolean.class, int.class, String.class).connect(receiver::receive0);
    	receiver.reset();
    	sender.multiSignal4.emit(true);
    	assertNull(receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertFalse(receiver.received);
    	receiver.reset();
    	sender.multiSignal4.emit(8);
    	assertNull(receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertFalse(receiver.received);
    	receiver.reset();
    	sender.multiSignal4.emit("X");
    	assertNull(receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertFalse(receiver.received);
    	receiver.reset();
    	sender.multiSignal4.emit("X", 5);
    	assertNull(receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertFalse(receiver.received);
    	receiver.reset();
    	sender.multiSignal4.emit(8, true);
    	assertNull(receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertFalse(receiver.received);
    	receiver.reset();
    	sender.multiSignal4.emit(true, "Z");
    	assertNull(receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertFalse(receiver.received);
    	receiver.reset();
    	sender.multiSignal4.emit(true, 98, "Z");
    	assertNull(receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertTrue(receiver.received);
    	sender.multiSignal4.overload(boolean.class, int.class, String.class).disconnect(receiver::receive0);
    	
    	sender.multiSignal4.overload(String.class, int.class).connect(receiver::receiveS);
    	receiver.reset();
    	sender.multiSignal4.emit(true);
    	assertNull(receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertFalse(receiver.received);
    	receiver.reset();
    	sender.multiSignal4.emit(8);
    	assertNull(receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertFalse(receiver.received);
    	receiver.reset();
    	sender.multiSignal4.emit("X");
    	assertEquals("X", receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertTrue(receiver.received);
    	receiver.reset();
    	sender.multiSignal4.emit("X", 5);
    	assertEquals("X", receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertTrue(receiver.received);
    	receiver.reset();
    	sender.multiSignal4.emit(8, true);
    	assertNull(receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertFalse(receiver.received);
    	receiver.reset();
    	sender.multiSignal4.emit(true, "Z");
    	assertNull(receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertFalse(receiver.received);
    	receiver.reset();
    	sender.multiSignal4.emit(true, 98, "Z");
    	assertNull(receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertFalse(receiver.received);
    	sender.multiSignal4.overload(String.class, int.class).disconnect(receiver::receiveS);
    	
    	sender.multiSignal4.overload(int.class, boolean.class).connect(receiver::receiveI);
    	receiver.reset();
    	sender.multiSignal4.emit(true);
    	assertNull(receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertFalse(receiver.received);
    	receiver.reset();
    	sender.multiSignal4.emit(8);
    	assertNull(receiver.receivedS);
    	assertEquals(Integer.valueOf(8), receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertTrue(receiver.received);
    	receiver.reset();
    	sender.multiSignal4.emit("X");
    	assertNull(receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertFalse(receiver.received);
    	receiver.reset();
    	sender.multiSignal4.emit("X", 5);
    	assertNull(receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertFalse(receiver.received);
    	receiver.reset();
    	sender.multiSignal4.emit(8, true);
    	assertNull(receiver.receivedS);
    	assertEquals(Integer.valueOf(8), receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertTrue(receiver.received);
    	receiver.reset();
    	sender.multiSignal4.emit(true, "Z");
    	assertNull(receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertFalse(receiver.received);
    	receiver.reset();
    	sender.multiSignal4.emit(true, 98, "Z");
    	assertNull(receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertFalse(receiver.received);
    	sender.multiSignal4.overload(int.class, boolean.class).disconnect(receiver::receiveI);
    	
    	sender.multiSignal4.overload(boolean.class, String.class).connect(receiver::receiveB);
    	receiver.reset();
    	sender.multiSignal4.emit(true);
    	assertNull(receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertEquals(Boolean.TRUE, receiver.receivedB);
    	assertTrue(receiver.received);
    	receiver.reset();
    	sender.multiSignal4.emit(8);
    	assertNull(receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertFalse(receiver.received);
    	receiver.reset();
    	sender.multiSignal4.emit("X");
    	assertNull(receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertFalse(receiver.received);
    	receiver.reset();
    	sender.multiSignal4.emit("X", 5);
    	assertNull(receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertFalse(receiver.received);
    	receiver.reset();
    	sender.multiSignal4.emit(8, true);
    	assertNull(receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertFalse(receiver.received);
    	receiver.reset();
    	sender.multiSignal4.emit(true, "Z");
    	assertNull(receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertEquals(Boolean.TRUE, receiver.receivedB);
    	assertTrue(receiver.received);
    	receiver.reset();
    	sender.multiSignal4.emit(true, 98, "Z");
    	assertNull(receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertFalse(receiver.received);
    	sender.multiSignal4.overload(boolean.class, String.class).disconnect(receiver::receiveB);
    	
    	sender.multiSignal4.overload(boolean.class, int.class, String.class).connect(receiver::receiveB);
    	receiver.reset();
    	sender.multiSignal4.emit(true);
    	assertNull(receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertFalse(receiver.received);
    	receiver.reset();
    	sender.multiSignal4.emit(8);
    	assertNull(receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertFalse(receiver.received);
    	receiver.reset();
    	sender.multiSignal4.emit("X");
    	assertNull(receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertFalse(receiver.received);
    	receiver.reset();
    	sender.multiSignal4.emit("X", 5);
    	assertNull(receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertFalse(receiver.received);
    	receiver.reset();
    	sender.multiSignal4.emit(8, true);
    	assertNull(receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertFalse(receiver.received);
    	receiver.reset();
    	sender.multiSignal4.emit(true, "Z");
    	assertNull(receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertFalse(receiver.received);
    	receiver.reset();
    	sender.multiSignal4.emit(true, 98, "Z");
    	assertNull(receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertEquals(Boolean.TRUE, receiver.receivedB);
    	assertTrue(receiver.received);
    	sender.multiSignal4.overload(boolean.class, int.class, String.class).disconnect(receiver::receiveB);
    	
    	sender.multiSignal4.overload(String.class, int.class).connect(receiver::receiveSI);
    	receiver.reset();
    	sender.multiSignal4.emit(true);
    	assertNull(receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertFalse(receiver.received);
    	receiver.reset();
    	sender.multiSignal4.emit(8);
    	assertNull(receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertFalse(receiver.received);
    	receiver.reset();
    	sender.multiSignal4.emit("X");
    	assertEquals("X", receiver.receivedS);
    	assertEquals(Integer.valueOf(147), receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertTrue(receiver.received);
    	receiver.reset();
    	sender.multiSignal4.emit("X", 5);
    	assertEquals("X", receiver.receivedS);
    	assertEquals(Integer.valueOf(5), receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertTrue(receiver.received);
    	receiver.reset();
    	sender.multiSignal4.emit(8, true);
    	assertNull(receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertFalse(receiver.received);
    	receiver.reset();
    	sender.multiSignal4.emit(true, "Z");
    	assertNull(receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertFalse(receiver.received);
    	receiver.reset();
    	sender.multiSignal4.emit(true, 98, "Z");
    	assertNull(receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertFalse(receiver.received);
    	sender.multiSignal4.overload(String.class, int.class).disconnect(receiver::receiveSI);
    	
    	sender.multiSignal4.overload(int.class, boolean.class).connect(receiver::receiveIB);
    	receiver.reset();
    	sender.multiSignal4.emit(true);
    	assertNull(receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertFalse(receiver.received);
    	receiver.reset();
    	sender.multiSignal4.emit(8);
    	assertNull(receiver.receivedS);
    	assertEquals(Integer.valueOf(8), receiver.receivedI);
    	assertEquals(Boolean.TRUE, receiver.receivedB);
    	assertTrue(receiver.received);
    	receiver.reset();
    	sender.multiSignal4.emit("X");
    	assertNull(receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertFalse(receiver.received);
    	receiver.reset();
    	sender.multiSignal4.emit("X", 5);
    	assertNull(receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertFalse(receiver.received);
    	receiver.reset();
    	sender.multiSignal4.emit(8, true);
    	assertNull(receiver.receivedS);
    	assertEquals(Integer.valueOf(8), receiver.receivedI);
    	assertEquals(Boolean.TRUE, receiver.receivedB);
    	assertTrue(receiver.received);
    	receiver.reset();
    	sender.multiSignal4.emit(true, "Z");
    	assertNull(receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertFalse(receiver.received);
    	receiver.reset();
    	sender.multiSignal4.emit(true, 98, "Z");
    	assertNull(receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertFalse(receiver.received);
    	sender.multiSignal4.overload(int.class, boolean.class).disconnect(receiver::receiveIB);
    	
    	sender.multiSignal4.overload(boolean.class, String.class).connect(receiver::receiveBS);
    	receiver.reset();
    	sender.multiSignal4.emit(true);
    	assertEquals("TEST", receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertEquals(Boolean.TRUE, receiver.receivedB);
    	assertTrue(receiver.received);
    	receiver.reset();
    	sender.multiSignal4.emit(8);
    	assertNull(receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertFalse(receiver.received);
    	receiver.reset();
    	sender.multiSignal4.emit("X");
    	assertNull(receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertFalse(receiver.received);
    	receiver.reset();
    	sender.multiSignal4.emit("X", 5);
    	assertNull(receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertFalse(receiver.received);
    	receiver.reset();
    	sender.multiSignal4.emit(8, true);
    	assertNull(receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertFalse(receiver.received);
    	receiver.reset();
    	sender.multiSignal4.emit(true, "Z");
    	assertEquals("Z", receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertEquals(Boolean.TRUE, receiver.receivedB);
    	assertTrue(receiver.received);
    	receiver.reset();
    	sender.multiSignal4.emit(true, 98, "Z");
    	assertNull(receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertFalse(receiver.received);
    	sender.multiSignal4.overload(boolean.class, String.class).disconnect(receiver::receiveBS);
    	
    	sender.multiSignal4.overload(boolean.class, int.class, String.class).connect(receiver::receiveBI);
    	receiver.reset();
    	sender.multiSignal4.emit(true);
    	assertNull(receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertFalse(receiver.received);
    	receiver.reset();
    	sender.multiSignal4.emit(8);
    	assertNull(receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertFalse(receiver.received);
    	receiver.reset();
    	sender.multiSignal4.emit("X");
    	assertNull(receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertFalse(receiver.received);
    	receiver.reset();
    	sender.multiSignal4.emit("X", 5);
    	assertNull(receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertFalse(receiver.received);
    	receiver.reset();
    	sender.multiSignal4.emit(8, true);
    	assertNull(receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertFalse(receiver.received);
    	receiver.reset();
    	sender.multiSignal4.emit(true, "Z");
    	assertNull(receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertFalse(receiver.received);
    	receiver.reset();
    	sender.multiSignal4.emit(true, 98, "Z");
    	assertNull(receiver.receivedS);
    	assertEquals(Integer.valueOf(98), receiver.receivedI);
    	assertEquals(Boolean.TRUE, receiver.receivedB);
    	assertTrue(receiver.received);
    	sender.multiSignal4.overload(boolean.class, int.class, String.class).disconnect(receiver::receiveBI);
    	
    	sender.multiSignal4.overload(boolean.class, int.class, String.class).connect(receiver::receiveBIS);
    	receiver.reset();
    	sender.multiSignal4.emit(true);
    	assertNull(receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertFalse(receiver.received);
    	receiver.reset();
    	sender.multiSignal4.emit(8);
    	assertNull(receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertFalse(receiver.received);
    	receiver.reset();
    	sender.multiSignal4.emit("X");
    	assertNull(receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertFalse(receiver.received);
    	receiver.reset();
    	sender.multiSignal4.emit("X", 5);
    	assertNull(receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertFalse(receiver.received);
    	receiver.reset();
    	sender.multiSignal4.emit(8, true);
    	assertNull(receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertFalse(receiver.received);
    	receiver.reset();
    	sender.multiSignal4.emit(true, "Z");
    	assertNull(receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertFalse(receiver.received);
    	receiver.reset();
    	sender.multiSignal4.emit(true, 98, "Z");
    	assertEquals("Z", receiver.receivedS);
    	assertEquals(Integer.valueOf(98), receiver.receivedI);
    	assertEquals(Boolean.TRUE, receiver.receivedB);
    	assertTrue(receiver.received);
    	sender.multiSignal4.overload(boolean.class, int.class, String.class).disconnect(receiver::receiveBIS);
    	
    	
    	sender.multiSignal1.overload().connect(receiver, "receive0()");
    	receiver.reset();
    	sender.emit_multiSignal1();
    	assertNull(receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertTrue(receiver.received);
    	sender.multiSignal1.overload().disconnect(receiver, "receive0()");

    	sender.multiSignal1.overload(int.class).connect(receiver, "receive0()");
    	receiver.reset();
    	assertNull(receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertFalse(receiver.received);

    	sender.emit_multiSignal1();
    	assertNull(receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertFalse(receiver.received);

    	sender.emit_multiSignal1(164);
    	assertNull(receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertTrue(receiver.received);
    	sender.multiSignal1.overload(int.class).disconnect(receiver, "receive0()");

    	sender.multiSignal1.overload(int.class, String.class).connect(receiver, "receive0()");
    	receiver.reset();
    	sender.emit_multiSignal1(104, "E");
    	assertNull(receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertTrue(receiver.received);
    	sender.multiSignal1.overload(int.class, String.class).disconnect(receiver, "receive0()");
    	receiver.reset();
    	
    	try {
			sender.multiSignal1.overload(boolean.class).connect(receiver, "receive0()");
			assertTrue("should throw QNoSuchSignalException", false);
		} catch (QNoSuchSignalException e) {
		}

    	sender.multiSignal1.overload(int.class).connect(receiver::receiveI);
    	receiver.reset();
    	sender.emit_multiSignal1(648);
    	assertNull(receiver.receivedS);
    	assertEquals(Integer.valueOf(648), receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertTrue(receiver.received);
    	sender.multiSignal1.overload(int.class).disconnect(receiver::receiveI);

    	sender.multiSignal1.overload(int.class, String.class).connect(receiver::receiveI);
    	receiver.reset();
    	sender.emit_multiSignal1(967, "X");
    	assertNull(receiver.receivedS);
    	assertEquals(Integer.valueOf(967), receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertTrue(receiver.received);
    	sender.multiSignal1.overload(int.class, String.class).disconnect(receiver::receiveI);

    	sender.multiSignal1.overload(int.class, String.class).connect(receiver, "receiveIS(int,String)");
    	receiver.reset();
    	sender.emit_multiSignal1(967, "Q");
    	assertEquals("Q", receiver.receivedS);
    	assertEquals(Integer.valueOf(967), receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertTrue(receiver.received);
    	sender.multiSignal1.overload(int.class, String.class).disconnect(receiver, "receiveIS(int,String)");
    	
    	sender.multiSignal1.overload().connect(receiver, "receive0()");
    	receiver.reset();
    	sender.multiSignal1.emit();
    	assertNull(receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertTrue(receiver.received);
    	sender.multiSignal1.overload().disconnect(receiver, "receive0()");

    	sender.multiSignal1.overload(int.class).connect(receiver, "receive0()");
    	receiver.reset();
    	sender.multiSignal1.emit();
    	assertNull(receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertFalse(receiver.received);
    	sender.multiSignal1.emit(9473);
    	assertNull(receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertTrue(receiver.received);
    	sender.multiSignal1.overload(int.class).disconnect(receiver, "receive0()");

    	sender.multiSignal1.overload(int.class, String.class).connect(receiver, "receive0()");
    	receiver.reset();
    	sender.multiSignal1.emit(9473, "O");
    	assertNull(receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertTrue(receiver.received);
    	sender.multiSignal1.overload(int.class, String.class).disconnect(receiver, "receive0()");
    	receiver.reset();
    	
    	sender.multiSignal1.overload(int.class).connect(receiver::receiveI);
    	receiver.reset();
    	sender.multiSignal1.emit(648);
    	assertNull(receiver.receivedS);
    	assertEquals(Integer.valueOf(648), receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertTrue(receiver.received);
    	sender.multiSignal1.overload(int.class).disconnect(receiver::receiveI);

    	sender.multiSignal1.overload(int.class, String.class).connect(receiver::receiveI);
    	receiver.reset();
    	sender.multiSignal1.emit(967, "P");
    	assertNull(receiver.receivedS);
    	assertEquals(Integer.valueOf(967), receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertTrue(receiver.received);
    	sender.multiSignal1.overload(int.class, String.class).disconnect(receiver::receiveI);

    	sender.multiSignal1.overload(int.class, String.class).connect(receiver, "receiveIS(int,String)");
    	receiver.reset();
    	sender.multiSignal1.emit(967, "Q");
    	assertEquals("Q", receiver.receivedS);
    	assertEquals(Integer.valueOf(967), receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertTrue(receiver.received);
    	sender.multiSignal1.overload(int.class, String.class).disconnect(receiver, "receiveIS(int,String)");
    	
    	sender.multiSignal2.overload(String.class).connect(receiver, "receive0()");
    	receiver.reset();
    	sender.emit_multiSignal2(1);
    	sender.emit_multiSignal2(true);
    	sender.emit_multiSignal2("X");
    	assertNull(receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertTrue(receiver.received);
    	sender.multiSignal2.overload(String.class).disconnect(receiver, "receive0()");
    	
    	sender.multiSignal2.overload(int.class).connect(receiver, "receive0()");
    	receiver.reset();
    	sender.emit_multiSignal2(1);
    	sender.emit_multiSignal2(true);
    	sender.emit_multiSignal2("X");
    	assertNull(receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertTrue(receiver.received);
    	sender.multiSignal2.overload(int.class).disconnect(receiver, "receive0()");
    	
    	sender.multiSignal2.overload(boolean.class).connect(receiver, "receive0()");
    	receiver.reset();
    	sender.emit_multiSignal2(1);
    	sender.emit_multiSignal2(true);
    	sender.emit_multiSignal2("X");
    	assertNull(receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertTrue(receiver.received);
    	sender.multiSignal2.overload(boolean.class).disconnect(receiver, "receive0()");
    	
    	sender.multiSignal2.overload(String.class).connect(receiver, "receiveS(String)");
    	receiver.reset();
    	sender.emit_multiSignal2(1);
    	sender.emit_multiSignal2(true);
    	sender.emit_multiSignal2("X");
    	assertEquals("X", receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertTrue(receiver.received);
    	sender.multiSignal2.overload(String.class).disconnect(receiver, "receiveS(String)");
    	
    	sender.multiSignal2.overload(int.class).connect(receiver::receiveI);
    	receiver.reset();
    	sender.emit_multiSignal2(1);
    	sender.emit_multiSignal2(true);
    	sender.emit_multiSignal2("X");
    	assertNull(receiver.receivedS);
    	assertEquals(Integer.valueOf(1), receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertTrue(receiver.received);
    	sender.multiSignal2.overload(int.class).disconnect(receiver::receiveI);
    	
    	sender.multiSignal2.overload(boolean.class).connect(receiver, "receiveB(boolean)");
    	receiver.reset();
    	sender.emit_multiSignal2(1);
    	sender.emit_multiSignal2(true);
    	sender.emit_multiSignal2("X");
    	assertNull(receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertEquals(Boolean.TRUE, receiver.receivedB);
    	assertTrue(receiver.received);
    	sender.multiSignal2.overload(boolean.class).disconnect(receiver, "receiveB(boolean)");
    	
    	sender.multiSignal2.overload(String.class).connect(receiver, "receive0()");
    	receiver.reset();
    	sender.multiSignal2.emit(1);
    	sender.multiSignal2.emit(true);
    	sender.multiSignal2.emit("X");
    	assertNull(receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertTrue(receiver.received);
    	sender.multiSignal2.overload(String.class).disconnect(receiver, "receive0()");
    	
    	sender.multiSignal2.overload(int.class).connect(receiver, "receive0()");
    	receiver.reset();
    	sender.multiSignal2.emit(1);
    	sender.multiSignal2.emit(true);
    	sender.multiSignal2.emit("X");
    	assertNull(receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertTrue(receiver.received);
    	sender.multiSignal2.overload(int.class).disconnect(receiver, "receive0()");
    	
    	sender.multiSignal2.overload(boolean.class).connect(receiver, "receive0()");
    	receiver.reset();
    	sender.multiSignal2.emit(1);
    	sender.multiSignal2.emit(true);
    	sender.multiSignal2.emit("X");
    	assertNull(receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertTrue(receiver.received);
    	sender.multiSignal2.overload(boolean.class).disconnect(receiver, "receive0()");
    	
    	sender.multiSignal2.overload(String.class).connect(receiver, "receiveS(String)");
    	receiver.reset();
    	sender.multiSignal2.emit(1);
    	sender.multiSignal2.emit(true);
    	sender.multiSignal2.emit("X");
    	assertEquals("X", receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertTrue(receiver.received);
    	sender.multiSignal2.overload(String.class).disconnect(receiver, "receiveS(String)");
    	
    	sender.multiSignal2.overload(int.class).connect(receiver::receiveI);
    	receiver.reset();
    	sender.multiSignal2.emit(1);
    	sender.multiSignal2.emit(true);
    	sender.multiSignal2.emit("X");
    	assertNull(receiver.receivedS);
    	assertEquals(Integer.valueOf(1), receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertTrue(receiver.received);
    	sender.multiSignal2.overload(int.class).disconnect(receiver::receiveI);
    	
    	sender.multiSignal2.overload(boolean.class).connect(receiver, "receiveB(boolean)");
    	receiver.reset();
    	sender.multiSignal2.emit(1);
    	sender.multiSignal2.emit(true);
    	sender.multiSignal2.emit("X");
    	assertNull(receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertEquals(Boolean.TRUE, receiver.receivedB);
    	assertTrue(receiver.received);
    	sender.multiSignal2.overload(boolean.class).disconnect(receiver, "receiveB(boolean)");
    	
    	sender.multiSignal3.overload(int.class).connect(receiver, "receive0()");
    	receiver.reset();
    	sender.emit_multiSignal3();
    	assertNull(receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertFalse(receiver.received);
    	receiver.reset();
    	sender.emit_multiSignal3(true);
    	assertNull(receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertFalse(receiver.received);
    	receiver.reset();
    	sender.emit_multiSignal3(8);
    	assertNull(receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertTrue(receiver.received);
    	receiver.reset();
    	sender.emit_multiSignal3("X");
    	assertNull(receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertFalse(receiver.received);
    	sender.multiSignal3.overload(int.class).disconnect(receiver, "receive0()");
    	
    	sender.multiSignal3.overload(boolean.class).connect(receiver, "receive0()");
    	receiver.reset();
    	sender.emit_multiSignal3();
    	assertNull(receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertFalse(receiver.received);
    	receiver.reset();
    	sender.emit_multiSignal3(true);
    	assertNull(receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertTrue(receiver.received);
    	receiver.reset();
    	sender.emit_multiSignal3(8);
    	assertNull(receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertFalse(receiver.received);
    	receiver.reset();
    	sender.emit_multiSignal3("X");
    	assertNull(receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertFalse(receiver.received);
    	sender.multiSignal3.overload(boolean.class).disconnect(receiver, "receive0()");
    	
    	sender.multiSignal3.overload(String.class).connect(receiver, "receive0()");
    	receiver.reset();
    	sender.emit_multiSignal3();
    	assertNull(receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertTrue(receiver.received);
    	receiver.reset();
    	sender.emit_multiSignal3(true);
    	assertNull(receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertFalse(receiver.received);
    	receiver.reset();
    	sender.emit_multiSignal3(8);
    	assertNull(receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertFalse(receiver.received);
    	receiver.reset();
    	sender.emit_multiSignal3("X");
    	assertNull(receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertTrue(receiver.received);
    	sender.multiSignal3.overload(String.class).disconnect(receiver, "receive0()");
    	
    	sender.multiSignal3.overload(int.class).connect(receiver::receiveI);
    	receiver.reset();
    	sender.emit_multiSignal3();
    	assertNull(receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertFalse(receiver.received);
    	receiver.reset();
    	sender.emit_multiSignal3(true);
    	assertNull(receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertFalse(receiver.received);
    	receiver.reset();
    	sender.emit_multiSignal3(8);
    	assertNull(receiver.receivedS);
    	assertEquals(Integer.valueOf(8), receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertTrue(receiver.received);
    	receiver.reset();
    	sender.emit_multiSignal3("X");
    	assertNull(receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertFalse(receiver.received);
    	sender.multiSignal3.overload(int.class).disconnect(receiver::receiveI);
    	
    	sender.multiSignal3.overload(boolean.class).connect(receiver, "receiveB(boolean)");
    	receiver.reset();
    	sender.emit_multiSignal3();
    	assertNull(receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertFalse(receiver.received);
    	receiver.reset();
    	sender.emit_multiSignal3(true);
    	assertNull(receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertEquals(Boolean.TRUE, receiver.receivedB);
    	assertTrue(receiver.received);
    	receiver.reset();
    	sender.emit_multiSignal3(8);
    	assertNull(receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertFalse(receiver.received);
    	receiver.reset();
    	sender.emit_multiSignal3("X");
    	assertNull(receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertFalse(receiver.received);
    	sender.multiSignal3.overload(boolean.class).disconnect(receiver, "receiveB(boolean)");
    	
    	sender.multiSignal3.overload(String.class).connect(receiver, "receiveS(String)");
    	receiver.reset();
    	sender.emit_multiSignal3();
    	assertEquals("TEST", receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertTrue(receiver.received);
    	receiver.reset();
    	sender.emit_multiSignal3(true);
    	assertNull(receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertFalse(receiver.received);
    	receiver.reset();
    	sender.emit_multiSignal3(8);
    	assertNull(receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertFalse(receiver.received);
    	receiver.reset();
    	sender.emit_multiSignal3("X");
    	assertEquals("X", receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertTrue(receiver.received);
    	sender.multiSignal3.overload(String.class).disconnect(receiver, "receiveS(String)");
    	
    	sender.multiSignal3.overload(int.class).connect(receiver, "receive0()");
    	receiver.reset();
    	sender.multiSignal3.emit();
    	assertNull(receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertFalse(receiver.received);
    	receiver.reset();
    	sender.multiSignal3.emit(true);
    	assertNull(receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertFalse(receiver.received);
    	receiver.reset();
    	sender.multiSignal3.emit(8);
    	assertNull(receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertTrue(receiver.received);
    	receiver.reset();
    	sender.multiSignal3.emit("X");
    	assertNull(receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertFalse(receiver.received);
    	sender.multiSignal3.overload(int.class).disconnect(receiver, "receive0()");
    	
    	sender.multiSignal3.overload(boolean.class).connect(receiver, "receive0()");
    	receiver.reset();
    	sender.multiSignal3.emit();
    	assertNull(receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertFalse(receiver.received);
    	receiver.reset();
    	sender.multiSignal3.emit(true);
    	assertNull(receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertTrue(receiver.received);
    	receiver.reset();
    	sender.multiSignal3.emit(8);
    	assertNull(receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertFalse(receiver.received);
    	receiver.reset();
    	sender.multiSignal3.emit("X");
    	assertNull(receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertFalse(receiver.received);
    	sender.multiSignal3.overload(boolean.class).disconnect(receiver, "receive0()");
    	
    	sender.multiSignal3.overload(String.class).connect(receiver, "receive0()");
    	receiver.reset();
    	sender.multiSignal3.emit();
    	assertNull(receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertTrue(receiver.received);
    	receiver.reset();
    	sender.multiSignal3.emit(true);
    	assertNull(receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertFalse(receiver.received);
    	receiver.reset();
    	sender.multiSignal3.emit(8);
    	assertNull(receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertFalse(receiver.received);
    	receiver.reset();
    	sender.multiSignal3.emit("X");
    	assertNull(receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertTrue(receiver.received);
    	sender.multiSignal3.overload(String.class).disconnect(receiver, "receive0()");
    	
    	sender.multiSignal3.overload(int.class).connect(receiver::receiveI);
    	receiver.reset();
    	sender.multiSignal3.emit();
    	assertNull(receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertFalse(receiver.received);
    	receiver.reset();
    	sender.multiSignal3.emit(true);
    	assertNull(receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertFalse(receiver.received);
    	receiver.reset();
    	sender.multiSignal3.emit(8);
    	assertNull(receiver.receivedS);
    	assertEquals(Integer.valueOf(8), receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertTrue(receiver.received);
    	receiver.reset();
    	sender.multiSignal3.emit("X");
    	assertNull(receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertFalse(receiver.received);
    	sender.multiSignal3.overload(int.class).disconnect(receiver::receiveI);
    	
    	sender.multiSignal3.overload(boolean.class).connect(receiver, "receiveB(boolean)");
    	receiver.reset();
    	sender.multiSignal3.emit();
    	assertNull(receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertFalse(receiver.received);
    	receiver.reset();
    	sender.multiSignal3.emit(true);
    	assertNull(receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertEquals(Boolean.TRUE, receiver.receivedB);
    	assertTrue(receiver.received);
    	receiver.reset();
    	sender.multiSignal3.emit(8);
    	assertNull(receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertFalse(receiver.received);
    	receiver.reset();
    	sender.multiSignal3.emit("X");
    	assertNull(receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertFalse(receiver.received);
    	sender.multiSignal3.overload(boolean.class).disconnect(receiver, "receiveB(boolean)");
    	
    	sender.multiSignal3.overload(String.class).connect(receiver, "receiveS(String)");
    	receiver.reset();
    	sender.multiSignal3.emit();
    	assertEquals("TEST", receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertTrue(receiver.received);
    	receiver.reset();
    	sender.multiSignal3.emit(true);
    	assertNull(receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertFalse(receiver.received);
    	receiver.reset();
    	sender.multiSignal3.emit(8);
    	assertNull(receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertFalse(receiver.received);
    	receiver.reset();
    	sender.multiSignal3.emit("X");
    	assertEquals("X", receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertTrue(receiver.received);
    	sender.multiSignal3.overload(String.class).disconnect(receiver, "receiveS(String)");
    	
    	sender.multiSignal4.overload(String.class, int.class).connect(receiver, "receive0()");
    	receiver.reset();
    	sender.emit_multiSignal4(true);
    	assertNull(receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertFalse(receiver.received);
    	receiver.reset();
    	sender.emit_multiSignal4(8);
    	assertNull(receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertFalse(receiver.received);
    	receiver.reset();
    	sender.emit_multiSignal4("X");
    	assertNull(receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertTrue(receiver.received);
    	receiver.reset();
    	sender.emit_multiSignal4("X", 5);
    	assertNull(receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertTrue(receiver.received);
    	receiver.reset();
    	sender.emit_multiSignal4(8, true);
    	assertNull(receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertFalse(receiver.received);
    	receiver.reset();
    	sender.emit_multiSignal4(true, "Z");
    	assertNull(receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertFalse(receiver.received);
    	receiver.reset();
    	sender.emit_multiSignal4(true, 98, "Z");
    	assertNull(receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertFalse(receiver.received);
    	sender.multiSignal4.overload(String.class, int.class).disconnect(receiver, "receive0()");
    	
    	sender.multiSignal4.overload(int.class, boolean.class).connect(receiver, "receive0()");
    	receiver.reset();
    	sender.emit_multiSignal4(true);
    	assertNull(receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertFalse(receiver.received);
    	receiver.reset();
    	sender.emit_multiSignal4(8);
    	assertNull(receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertTrue(receiver.received);
    	receiver.reset();
    	sender.emit_multiSignal4("X");
    	assertNull(receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertFalse(receiver.received);
    	receiver.reset();
    	sender.emit_multiSignal4("X", 5);
    	assertNull(receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertFalse(receiver.received);
    	receiver.reset();
    	sender.emit_multiSignal4(8, true);
    	assertNull(receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertTrue(receiver.received);
    	receiver.reset();
    	sender.emit_multiSignal4(true, "Z");
    	assertNull(receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertFalse(receiver.received);
    	receiver.reset();
    	sender.emit_multiSignal4(true, 98, "Z");
    	assertNull(receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertFalse(receiver.received);
    	sender.multiSignal4.overload(int.class, boolean.class).disconnect(receiver, "receive0()");
    	
    	sender.multiSignal4.overload(boolean.class, String.class).connect(receiver, "receive0()");
    	receiver.reset();
    	sender.emit_multiSignal4(true);
    	assertNull(receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertTrue(receiver.received);
    	receiver.reset();
    	sender.emit_multiSignal4(8);
    	assertNull(receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertFalse(receiver.received);
    	receiver.reset();
    	sender.emit_multiSignal4("X");
    	assertNull(receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertFalse(receiver.received);
    	receiver.reset();
    	sender.emit_multiSignal4("X", 5);
    	assertNull(receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertFalse(receiver.received);
    	receiver.reset();
    	sender.emit_multiSignal4(8, true);
    	assertNull(receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertFalse(receiver.received);
    	receiver.reset();
    	sender.emit_multiSignal4(true, "Z");
    	assertNull(receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertTrue(receiver.received);
    	receiver.reset();
    	sender.emit_multiSignal4(true, 98, "Z");
    	assertNull(receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertFalse(receiver.received);
    	sender.multiSignal4.overload(boolean.class, String.class).disconnect(receiver, "receive0()");
    	
    	sender.multiSignal4.overload(boolean.class, int.class, String.class).connect(receiver, "receive0()");
    	receiver.reset();
    	sender.emit_multiSignal4(true);
    	assertNull(receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertFalse(receiver.received);
    	receiver.reset();
    	sender.emit_multiSignal4(8);
    	assertNull(receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertFalse(receiver.received);
    	receiver.reset();
    	sender.emit_multiSignal4("X");
    	assertNull(receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertFalse(receiver.received);
    	receiver.reset();
    	sender.emit_multiSignal4("X", 5);
    	assertNull(receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertFalse(receiver.received);
    	receiver.reset();
    	sender.emit_multiSignal4(8, true);
    	assertNull(receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertFalse(receiver.received);
    	receiver.reset();
    	sender.emit_multiSignal4(true, "Z");
    	assertNull(receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertFalse(receiver.received);
    	receiver.reset();
    	sender.emit_multiSignal4(true, 98, "Z");
    	assertNull(receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertTrue(receiver.received);
    	sender.multiSignal4.overload(boolean.class, int.class, String.class).disconnect(receiver, "receive0()");
    	
    	sender.multiSignal4.overload(String.class, int.class).connect(receiver, "receiveS(String)");
    	receiver.reset();
    	sender.emit_multiSignal4(true);
    	assertNull(receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertFalse(receiver.received);
    	receiver.reset();
    	sender.emit_multiSignal4(8);
    	assertNull(receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertFalse(receiver.received);
    	receiver.reset();
    	sender.emit_multiSignal4("X");
    	assertEquals("X", receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertTrue(receiver.received);
    	receiver.reset();
    	sender.emit_multiSignal4("X", 5);
    	assertEquals("X", receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertTrue(receiver.received);
    	receiver.reset();
    	sender.emit_multiSignal4(8, true);
    	assertNull(receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertFalse(receiver.received);
    	receiver.reset();
    	sender.emit_multiSignal4(true, "Z");
    	assertNull(receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertFalse(receiver.received);
    	receiver.reset();
    	sender.emit_multiSignal4(true, 98, "Z");
    	assertNull(receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertFalse(receiver.received);
    	sender.multiSignal4.overload(String.class, int.class).disconnect(receiver, "receiveS(String)");
    	
    	sender.multiSignal4.overload(int.class, boolean.class).connect(receiver::receiveI);
    	receiver.reset();
    	sender.emit_multiSignal4(true);
    	assertNull(receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertFalse(receiver.received);
    	receiver.reset();
    	sender.emit_multiSignal4(8);
    	assertNull(receiver.receivedS);
    	assertEquals(Integer.valueOf(8), receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertTrue(receiver.received);
    	receiver.reset();
    	sender.emit_multiSignal4("X");
    	assertNull(receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertFalse(receiver.received);
    	receiver.reset();
    	sender.emit_multiSignal4("X", 5);
    	assertNull(receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertFalse(receiver.received);
    	receiver.reset();
    	sender.emit_multiSignal4(8, true);
    	assertNull(receiver.receivedS);
    	assertEquals(Integer.valueOf(8), receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertTrue(receiver.received);
    	receiver.reset();
    	sender.emit_multiSignal4(true, "Z");
    	assertNull(receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertFalse(receiver.received);
    	receiver.reset();
    	sender.emit_multiSignal4(true, 98, "Z");
    	assertNull(receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertFalse(receiver.received);
    	sender.multiSignal4.overload(int.class, boolean.class).disconnect(receiver::receiveI);
    	
    	sender.multiSignal4.overload(boolean.class, String.class).connect(receiver, "receiveB(boolean)");
    	receiver.reset();
    	sender.emit_multiSignal4(true);
    	assertNull(receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertEquals(Boolean.TRUE, receiver.receivedB);
    	assertTrue(receiver.received);
    	receiver.reset();
    	sender.emit_multiSignal4(8);
    	assertNull(receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertFalse(receiver.received);
    	receiver.reset();
    	sender.emit_multiSignal4("X");
    	assertNull(receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertFalse(receiver.received);
    	receiver.reset();
    	sender.emit_multiSignal4("X", 5);
    	assertNull(receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertFalse(receiver.received);
    	receiver.reset();
    	sender.emit_multiSignal4(8, true);
    	assertNull(receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertFalse(receiver.received);
    	receiver.reset();
    	sender.emit_multiSignal4(true, "Z");
    	assertNull(receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertEquals(Boolean.TRUE, receiver.receivedB);
    	assertTrue(receiver.received);
    	receiver.reset();
    	sender.emit_multiSignal4(true, 98, "Z");
    	assertNull(receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertFalse(receiver.received);
    	sender.multiSignal4.overload(boolean.class, String.class).disconnect(receiver, "receiveB(boolean)");
    	
    	sender.multiSignal4.overload(boolean.class, int.class, String.class).connect(receiver, "receiveB(boolean)");
    	receiver.reset();
    	sender.emit_multiSignal4(true);
    	assertNull(receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertFalse(receiver.received);
    	receiver.reset();
    	sender.emit_multiSignal4(8);
    	assertNull(receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertFalse(receiver.received);
    	receiver.reset();
    	sender.emit_multiSignal4("X");
    	assertNull(receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertFalse(receiver.received);
    	receiver.reset();
    	sender.emit_multiSignal4("X", 5);
    	assertNull(receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertFalse(receiver.received);
    	receiver.reset();
    	sender.emit_multiSignal4(8, true);
    	assertNull(receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertFalse(receiver.received);
    	receiver.reset();
    	sender.emit_multiSignal4(true, "Z");
    	assertNull(receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertFalse(receiver.received);
    	receiver.reset();
    	sender.emit_multiSignal4(true, 98, "Z");
    	assertNull(receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertEquals(Boolean.TRUE, receiver.receivedB);
    	assertTrue(receiver.received);
    	sender.multiSignal4.overload(boolean.class, int.class, String.class).disconnect(receiver, "receiveB(boolean)");
    	
    	sender.multiSignal4.overload(String.class, int.class).connect(receiver, "receiveSI(String,int)");
    	receiver.reset();
    	sender.emit_multiSignal4(true);
    	assertNull(receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertFalse(receiver.received);
    	receiver.reset();
    	sender.emit_multiSignal4(8);
    	assertNull(receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertFalse(receiver.received);
    	receiver.reset();
    	sender.emit_multiSignal4("X");
    	assertEquals("X", receiver.receivedS);
    	assertEquals(Integer.valueOf(147), receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertTrue(receiver.received);
    	receiver.reset();
    	sender.emit_multiSignal4("X", 5);
    	assertEquals("X", receiver.receivedS);
    	assertEquals(Integer.valueOf(5), receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertTrue(receiver.received);
    	receiver.reset();
    	sender.emit_multiSignal4(8, true);
    	assertNull(receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertFalse(receiver.received);
    	receiver.reset();
    	sender.emit_multiSignal4(true, "Z");
    	assertNull(receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertFalse(receiver.received);
    	receiver.reset();
    	sender.emit_multiSignal4(true, 98, "Z");
    	assertNull(receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertFalse(receiver.received);
    	sender.multiSignal4.overload(String.class, int.class).disconnect(receiver, "receiveSI(String,int)");
    	
    	sender.multiSignal4.overload(int.class, boolean.class).connect(receiver, "receiveIB(int,boolean)");
    	receiver.reset();
    	sender.emit_multiSignal4(true);
    	assertNull(receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertFalse(receiver.received);
    	receiver.reset();
    	sender.emit_multiSignal4(8);
    	assertNull(receiver.receivedS);
    	assertEquals(Integer.valueOf(8), receiver.receivedI);
    	assertEquals(Boolean.TRUE, receiver.receivedB);
    	assertTrue(receiver.received);
    	receiver.reset();
    	sender.emit_multiSignal4("X");
    	assertNull(receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertFalse(receiver.received);
    	receiver.reset();
    	sender.emit_multiSignal4("X", 5);
    	assertNull(receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertFalse(receiver.received);
    	receiver.reset();
    	sender.emit_multiSignal4(8, true);
    	assertNull(receiver.receivedS);
    	assertEquals(Integer.valueOf(8), receiver.receivedI);
    	assertEquals(Boolean.TRUE, receiver.receivedB);
    	assertTrue(receiver.received);
    	receiver.reset();
    	sender.emit_multiSignal4(true, "Z");
    	assertNull(receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertFalse(receiver.received);
    	receiver.reset();
    	sender.emit_multiSignal4(true, 98, "Z");
    	assertNull(receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertFalse(receiver.received);
    	sender.multiSignal4.overload(int.class, boolean.class).disconnect(receiver, "receiveIB(int,boolean)");
    	
    	sender.multiSignal4.overload(boolean.class, String.class).connect(receiver, "receiveBS(boolean,String)");
    	receiver.reset();
    	sender.emit_multiSignal4(true);
    	assertEquals("TEST", receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertEquals(Boolean.TRUE, receiver.receivedB);
    	assertTrue(receiver.received);
    	receiver.reset();
    	sender.emit_multiSignal4(8);
    	assertNull(receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertFalse(receiver.received);
    	receiver.reset();
    	sender.emit_multiSignal4("X");
    	assertNull(receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertFalse(receiver.received);
    	receiver.reset();
    	sender.emit_multiSignal4("X", 5);
    	assertNull(receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertFalse(receiver.received);
    	receiver.reset();
    	sender.emit_multiSignal4(8, true);
    	assertNull(receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertFalse(receiver.received);
    	receiver.reset();
    	sender.emit_multiSignal4(true, "Z");
    	assertEquals("Z", receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertEquals(Boolean.TRUE, receiver.receivedB);
    	assertTrue(receiver.received);
    	receiver.reset();
    	sender.emit_multiSignal4(true, 98, "Z");
    	assertNull(receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertFalse(receiver.received);
    	sender.multiSignal4.overload(boolean.class, String.class).disconnect(receiver, "receiveBS(boolean,String)");
    	
    	sender.multiSignal4.overload(boolean.class, int.class, String.class).connect(receiver, "receiveBI(boolean,int)");
    	receiver.reset();
    	sender.emit_multiSignal4(true);
    	assertNull(receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertFalse(receiver.received);
    	receiver.reset();
    	sender.emit_multiSignal4(8);
    	assertNull(receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertFalse(receiver.received);
    	receiver.reset();
    	sender.emit_multiSignal4("X");
    	assertNull(receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertFalse(receiver.received);
    	receiver.reset();
    	sender.emit_multiSignal4("X", 5);
    	assertNull(receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertFalse(receiver.received);
    	receiver.reset();
    	sender.emit_multiSignal4(8, true);
    	assertNull(receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertFalse(receiver.received);
    	receiver.reset();
    	sender.emit_multiSignal4(true, "Z");
    	assertNull(receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertFalse(receiver.received);
    	receiver.reset();
    	sender.emit_multiSignal4(true, 98, "Z");
    	assertNull(receiver.receivedS);
    	assertEquals(Integer.valueOf(98), receiver.receivedI);
    	assertEquals(Boolean.TRUE, receiver.receivedB);
    	assertTrue(receiver.received);
    	sender.multiSignal4.overload(boolean.class, int.class, String.class).disconnect(receiver, "receiveBI(boolean,int)");
    	
    	sender.multiSignal4.overload(boolean.class, int.class, String.class).connect(receiver, "receiveBIS(boolean,int,String)");
    	receiver.reset();
    	sender.emit_multiSignal4(true);
    	assertNull(receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertFalse(receiver.received);
    	receiver.reset();
    	sender.emit_multiSignal4(8);
    	assertNull(receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertFalse(receiver.received);
    	receiver.reset();
    	sender.emit_multiSignal4("X");
    	assertNull(receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertFalse(receiver.received);
    	receiver.reset();
    	sender.emit_multiSignal4("X", 5);
    	assertNull(receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertFalse(receiver.received);
    	receiver.reset();
    	sender.emit_multiSignal4(8, true);
    	assertNull(receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertFalse(receiver.received);
    	receiver.reset();
    	sender.emit_multiSignal4(true, "Z");
    	assertNull(receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertFalse(receiver.received);
    	receiver.reset();
    	sender.emit_multiSignal4(true, 98, "Z");
    	assertEquals("Z", receiver.receivedS);
    	assertEquals(Integer.valueOf(98), receiver.receivedI);
    	assertEquals(Boolean.TRUE, receiver.receivedB);
    	assertTrue(receiver.received);
    	sender.multiSignal4.overload(boolean.class, int.class, String.class).disconnect(receiver, "receiveBIS(boolean,int,String)");

    	sender.multiSignal4.overload(String.class, int.class).connect(receiver, "receive0()");
    	receiver.reset();
    	sender.multiSignal4.emit(true);
    	assertNull(receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertFalse(receiver.received);
    	receiver.reset();
    	sender.multiSignal4.emit(8);
    	assertNull(receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertFalse(receiver.received);
    	receiver.reset();
    	sender.multiSignal4.emit("X");
    	assertNull(receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertTrue(receiver.received);
    	receiver.reset();
    	sender.multiSignal4.emit("X", 5);
    	assertNull(receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertTrue(receiver.received);
    	receiver.reset();
    	sender.multiSignal4.emit(8, true);
    	assertNull(receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertFalse(receiver.received);
    	receiver.reset();
    	sender.multiSignal4.emit(true, "Z");
    	assertNull(receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertFalse(receiver.received);
    	receiver.reset();
    	sender.multiSignal4.emit(true, 98, "Z");
    	assertNull(receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertFalse(receiver.received);
    	sender.multiSignal4.overload(String.class, int.class).disconnect(receiver, "receive0()");
    	
    	sender.multiSignal4.overload(int.class, boolean.class).connect(receiver, "receive0()");
    	receiver.reset();
    	sender.multiSignal4.emit(true);
    	assertNull(receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertFalse(receiver.received);
    	receiver.reset();
    	sender.multiSignal4.emit(8);
    	assertNull(receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertTrue(receiver.received);
    	receiver.reset();
    	sender.multiSignal4.emit("X");
    	assertNull(receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertFalse(receiver.received);
    	receiver.reset();
    	sender.multiSignal4.emit("X", 5);
    	assertNull(receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertFalse(receiver.received);
    	receiver.reset();
    	sender.multiSignal4.emit(8, true);
    	assertNull(receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertTrue(receiver.received);
    	receiver.reset();
    	sender.multiSignal4.emit(true, "Z");
    	assertNull(receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertFalse(receiver.received);
    	receiver.reset();
    	sender.multiSignal4.emit(true, 98, "Z");
    	assertNull(receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertFalse(receiver.received);
    	sender.multiSignal4.overload(int.class, boolean.class).disconnect(receiver, "receive0()");
    	
    	sender.multiSignal4.overload(boolean.class, String.class).connect(receiver, "receive0()");
    	receiver.reset();
    	sender.multiSignal4.emit(true);
    	assertNull(receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertTrue(receiver.received);
    	receiver.reset();
    	sender.multiSignal4.emit(8);
    	assertNull(receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertFalse(receiver.received);
    	receiver.reset();
    	sender.multiSignal4.emit("X");
    	assertNull(receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertFalse(receiver.received);
    	receiver.reset();
    	sender.multiSignal4.emit("X", 5);
    	assertNull(receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertFalse(receiver.received);
    	receiver.reset();
    	sender.multiSignal4.emit(8, true);
    	assertNull(receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertFalse(receiver.received);
    	receiver.reset();
    	sender.multiSignal4.emit(true, "Z");
    	assertNull(receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertTrue(receiver.received);
    	receiver.reset();
    	sender.multiSignal4.emit(true, 98, "Z");
    	assertNull(receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertFalse(receiver.received);
    	sender.multiSignal4.overload(boolean.class, String.class).disconnect(receiver, "receive0()");
    	
    	sender.multiSignal4.overload(boolean.class, int.class, String.class).connect(receiver, "receive0()");
    	receiver.reset();
    	sender.multiSignal4.emit(true);
    	assertNull(receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertFalse(receiver.received);
    	receiver.reset();
    	sender.multiSignal4.emit(8);
    	assertNull(receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertFalse(receiver.received);
    	receiver.reset();
    	sender.multiSignal4.emit("X");
    	assertNull(receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertFalse(receiver.received);
    	receiver.reset();
    	sender.multiSignal4.emit("X", 5);
    	assertNull(receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertFalse(receiver.received);
    	receiver.reset();
    	sender.multiSignal4.emit(8, true);
    	assertNull(receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertFalse(receiver.received);
    	receiver.reset();
    	sender.multiSignal4.emit(true, "Z");
    	assertNull(receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertFalse(receiver.received);
    	receiver.reset();
    	sender.multiSignal4.emit(true, 98, "Z");
    	assertNull(receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertTrue(receiver.received);
    	sender.multiSignal4.overload(boolean.class, int.class, String.class).disconnect(receiver, "receive0()");
    	
    	sender.multiSignal4.overload(String.class, int.class).connect(receiver, "receiveS(String)");
    	receiver.reset();
    	sender.multiSignal4.emit(true);
    	assertNull(receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertFalse(receiver.received);
    	receiver.reset();
    	sender.multiSignal4.emit(8);
    	assertNull(receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertFalse(receiver.received);
    	receiver.reset();
    	sender.multiSignal4.emit("X");
    	assertEquals("X", receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertTrue(receiver.received);
    	receiver.reset();
    	sender.multiSignal4.emit("X", 5);
    	assertEquals("X", receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertTrue(receiver.received);
    	receiver.reset();
    	sender.multiSignal4.emit(8, true);
    	assertNull(receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertFalse(receiver.received);
    	receiver.reset();
    	sender.multiSignal4.emit(true, "Z");
    	assertNull(receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertFalse(receiver.received);
    	receiver.reset();
    	sender.multiSignal4.emit(true, 98, "Z");
    	assertNull(receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertFalse(receiver.received);
    	sender.multiSignal4.overload(String.class, int.class).disconnect(receiver, "receiveS(String)");
    	
    	sender.multiSignal4.overload(int.class, boolean.class).connect(receiver::receiveI);
    	receiver.reset();
    	sender.multiSignal4.emit(true);
    	assertNull(receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertFalse(receiver.received);
    	receiver.reset();
    	sender.multiSignal4.emit(8);
    	assertNull(receiver.receivedS);
    	assertEquals(Integer.valueOf(8), receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertTrue(receiver.received);
    	receiver.reset();
    	sender.multiSignal4.emit("X");
    	assertNull(receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertFalse(receiver.received);
    	receiver.reset();
    	sender.multiSignal4.emit("X", 5);
    	assertNull(receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertFalse(receiver.received);
    	receiver.reset();
    	sender.multiSignal4.emit(8, true);
    	assertNull(receiver.receivedS);
    	assertEquals(Integer.valueOf(8), receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertTrue(receiver.received);
    	receiver.reset();
    	sender.multiSignal4.emit(true, "Z");
    	assertNull(receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertFalse(receiver.received);
    	receiver.reset();
    	sender.multiSignal4.emit(true, 98, "Z");
    	assertNull(receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertFalse(receiver.received);
    	sender.multiSignal4.overload(int.class, boolean.class).disconnect(receiver::receiveI);
    	
    	sender.multiSignal4.overload(boolean.class, String.class).connect(receiver, "receiveB(boolean)");
    	receiver.reset();
    	sender.multiSignal4.emit(true);
    	assertNull(receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertEquals(Boolean.TRUE, receiver.receivedB);
    	assertTrue(receiver.received);
    	receiver.reset();
    	sender.multiSignal4.emit(8);
    	assertNull(receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertFalse(receiver.received);
    	receiver.reset();
    	sender.multiSignal4.emit("X");
    	assertNull(receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertFalse(receiver.received);
    	receiver.reset();
    	sender.multiSignal4.emit("X", 5);
    	assertNull(receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertFalse(receiver.received);
    	receiver.reset();
    	sender.multiSignal4.emit(8, true);
    	assertNull(receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertFalse(receiver.received);
    	receiver.reset();
    	sender.multiSignal4.emit(true, "Z");
    	assertNull(receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertEquals(Boolean.TRUE, receiver.receivedB);
    	assertTrue(receiver.received);
    	receiver.reset();
    	sender.multiSignal4.emit(true, 98, "Z");
    	assertNull(receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertFalse(receiver.received);
    	sender.multiSignal4.overload(boolean.class, String.class).disconnect(receiver, "receiveB(boolean)");
    	
    	sender.multiSignal4.overload(boolean.class, int.class, String.class).connect(receiver, "receiveB(boolean)");
    	receiver.reset();
    	sender.multiSignal4.emit(true);
    	assertNull(receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertFalse(receiver.received);
    	receiver.reset();
    	sender.multiSignal4.emit(8);
    	assertNull(receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertFalse(receiver.received);
    	receiver.reset();
    	sender.multiSignal4.emit("X");
    	assertNull(receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertFalse(receiver.received);
    	receiver.reset();
    	sender.multiSignal4.emit("X", 5);
    	assertNull(receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertFalse(receiver.received);
    	receiver.reset();
    	sender.multiSignal4.emit(8, true);
    	assertNull(receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertFalse(receiver.received);
    	receiver.reset();
    	sender.multiSignal4.emit(true, "Z");
    	assertNull(receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertFalse(receiver.received);
    	receiver.reset();
    	sender.multiSignal4.emit(true, 98, "Z");
    	assertNull(receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertEquals(Boolean.TRUE, receiver.receivedB);
    	assertTrue(receiver.received);
    	sender.multiSignal4.overload(boolean.class, int.class, String.class).disconnect(receiver, "receiveB(boolean)");
    	
    	sender.multiSignal4.overload(String.class, int.class).connect(receiver, "receiveSI(String,int)");
    	receiver.reset();
    	sender.multiSignal4.emit(true);
    	assertNull(receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertFalse(receiver.received);
    	receiver.reset();
    	sender.multiSignal4.emit(8);
    	assertNull(receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertFalse(receiver.received);
    	receiver.reset();
    	sender.multiSignal4.emit("X");
    	assertEquals("X", receiver.receivedS);
    	assertEquals(Integer.valueOf(147), receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertTrue(receiver.received);
    	receiver.reset();
    	sender.multiSignal4.emit("X", 5);
    	assertEquals("X", receiver.receivedS);
    	assertEquals(Integer.valueOf(5), receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertTrue(receiver.received);
    	receiver.reset();
    	sender.multiSignal4.emit(8, true);
    	assertNull(receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertFalse(receiver.received);
    	receiver.reset();
    	sender.multiSignal4.emit(true, "Z");
    	assertNull(receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertFalse(receiver.received);
    	receiver.reset();
    	sender.multiSignal4.emit(true, 98, "Z");
    	assertNull(receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertFalse(receiver.received);
    	sender.multiSignal4.overload(String.class, int.class).disconnect(receiver, "receiveSI(String,int)");
    	
    	sender.multiSignal4.overload(int.class, boolean.class).connect(receiver, "receiveIB(int,boolean)");
    	receiver.reset();
    	sender.multiSignal4.emit(true);
    	assertNull(receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertFalse(receiver.received);
    	receiver.reset();
    	sender.multiSignal4.emit(8);
    	assertNull(receiver.receivedS);
    	assertEquals(Integer.valueOf(8), receiver.receivedI);
    	assertEquals(Boolean.TRUE, receiver.receivedB);
    	assertTrue(receiver.received);
    	receiver.reset();
    	sender.multiSignal4.emit("X");
    	assertNull(receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertFalse(receiver.received);
    	receiver.reset();
    	sender.multiSignal4.emit("X", 5);
    	assertNull(receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertFalse(receiver.received);
    	receiver.reset();
    	sender.multiSignal4.emit(8, true);
    	assertNull(receiver.receivedS);
    	assertEquals(Integer.valueOf(8), receiver.receivedI);
    	assertEquals(Boolean.TRUE, receiver.receivedB);
    	assertTrue(receiver.received);
    	receiver.reset();
    	sender.multiSignal4.emit(true, "Z");
    	assertNull(receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertFalse(receiver.received);
    	receiver.reset();
    	sender.multiSignal4.emit(true, 98, "Z");
    	assertNull(receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertFalse(receiver.received);
    	sender.multiSignal4.overload(int.class, boolean.class).disconnect(receiver, "receiveIB(int,boolean)");
    	
    	sender.multiSignal4.overload(boolean.class, String.class).connect(receiver, "receiveBS(boolean,String)");
    	receiver.reset();
    	sender.multiSignal4.emit(true);
    	assertEquals("TEST", receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertEquals(Boolean.TRUE, receiver.receivedB);
    	assertTrue(receiver.received);
    	receiver.reset();
    	sender.multiSignal4.emit(8);
    	assertNull(receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertFalse(receiver.received);
    	receiver.reset();
    	sender.multiSignal4.emit("X");
    	assertNull(receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertFalse(receiver.received);
    	receiver.reset();
    	sender.multiSignal4.emit("X", 5);
    	assertNull(receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertFalse(receiver.received);
    	receiver.reset();
    	sender.multiSignal4.emit(8, true);
    	assertNull(receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertFalse(receiver.received);
    	receiver.reset();
    	sender.multiSignal4.emit(true, "Z");
    	assertEquals("Z", receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertEquals(Boolean.TRUE, receiver.receivedB);
    	assertTrue(receiver.received);
    	receiver.reset();
    	sender.multiSignal4.emit(true, 98, "Z");
    	assertNull(receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertFalse(receiver.received);
    	sender.multiSignal4.overload(boolean.class, String.class).disconnect(receiver, "receiveBS(boolean,String)");
    	
    	sender.multiSignal4.overload(boolean.class, int.class, String.class).connect(receiver, "receiveBI(boolean,int)");
    	receiver.reset();
    	sender.multiSignal4.emit(true);
    	assertNull(receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertFalse(receiver.received);
    	receiver.reset();
    	sender.multiSignal4.emit(8);
    	assertNull(receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertFalse(receiver.received);
    	receiver.reset();
    	sender.multiSignal4.emit("X");
    	assertNull(receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertFalse(receiver.received);
    	receiver.reset();
    	sender.multiSignal4.emit("X", 5);
    	assertNull(receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertFalse(receiver.received);
    	receiver.reset();
    	sender.multiSignal4.emit(8, true);
    	assertNull(receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertFalse(receiver.received);
    	receiver.reset();
    	sender.multiSignal4.emit(true, "Z");
    	assertNull(receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertFalse(receiver.received);
    	receiver.reset();
    	sender.multiSignal4.emit(true, 98, "Z");
    	assertNull(receiver.receivedS);
    	assertEquals(Integer.valueOf(98), receiver.receivedI);
    	assertEquals(Boolean.TRUE, receiver.receivedB);
    	assertTrue(receiver.received);
    	sender.multiSignal4.overload(boolean.class, int.class, String.class).disconnect(receiver, "receiveBI(boolean,int)");
    	
    	sender.multiSignal4.overload(boolean.class, int.class, String.class).connect(receiver, "receiveBIS(boolean,int,String)");
    	receiver.reset();
    	sender.multiSignal4.emit(true);
    	assertNull(receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertFalse(receiver.received);
    	receiver.reset();
    	sender.multiSignal4.emit(8);
    	assertNull(receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertFalse(receiver.received);
    	receiver.reset();
    	sender.multiSignal4.emit("X");
    	assertNull(receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertFalse(receiver.received);
    	receiver.reset();
    	sender.multiSignal4.emit("X", 5);
    	assertNull(receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertFalse(receiver.received);
    	receiver.reset();
    	sender.multiSignal4.emit(8, true);
    	assertNull(receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertFalse(receiver.received);
    	receiver.reset();
    	sender.multiSignal4.emit(true, "Z");
    	assertNull(receiver.receivedS);
    	assertNull(receiver.receivedI);
    	assertNull(receiver.receivedB);
    	assertFalse(receiver.received);
    	receiver.reset();
    	sender.multiSignal4.emit(true, 98, "Z");
    	assertEquals("Z", receiver.receivedS);
    	assertEquals(Integer.valueOf(98), receiver.receivedI);
    	assertEquals(Boolean.TRUE, receiver.receivedB);
    	assertTrue(receiver.received);
    	sender.multiSignal4.overload(boolean.class, int.class, String.class).disconnect(receiver, "receiveBIS(boolean,int,String)");
    }

    public static void main(String args[]) {
        org.junit.runner.JUnitCore.main(TestMultiSignals.class.getName());
    }
}
